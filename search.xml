<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS学习笔记（一）</title>
    <url>/2020/01/30/CSS%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>CSS(Cascading Style Sheets) 美化样式。CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。该部分包括简介、引用、Emmet语法、选择器、背景、特性等内容。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、CSS简介"><a href="#1、CSS简介" class="headerlink" title="1、CSS简介"></a>1、CSS简介</h3><p>用来布局网页美化页面；CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p>
<h3 id="2、代码风格"><a href="#2、代码风格" class="headerlink" title="2、代码风格"></a>2、代码风格</h3><p>选择器加样式属性；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 选择器&#123;样式&#125; */</span></span></span><br><span class="line">p &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-sixe: 12px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="3、CSS选择器"><a href="#3、CSS选择器" class="headerlink" title="3、CSS选择器"></a>3、CSS选择器</h3><h4 id="3-1选择器的作用"><a href="#3-1选择器的作用" class="headerlink" title="3.1选择器的作用"></a>3.1选择器的作用</h4><p>根据不同的需求选择相应的标签，要使用css对HTML页面中的元素实现一对一，一对多或者多对一的控制，这就需要用到CSS选择器。</p>
<p>HTML页面中的元素就是通过CSS选择器进行控制的。</p>
<h4 id="3-2标签选择器"><a href="#3-2标签选择器" class="headerlink" title="3.2标签选择器"></a>3.2标签选择器</h4><p>标签名作为选择器</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/* 选择器&#123;样式&#125; */</span></span></span><br><span class="line">p &#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="3-3类选择器（重点）"><a href="#3-3类选择器（重点）" class="headerlink" title="3.3类选择器（重点）"></a>3.3类选择器（重点）</h4><p>使用<code>.类名</code>的方式进行定义：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用class来调用，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SCC字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.font</span> &#123;</span></span><br><span class="line">            font-family:'Times New Roman', Times, serif;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    嘿嘿嘿</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="3-3-1-多类名"><a href="#3-3-1-多类名" class="headerlink" title="3.3.1 多类名"></a>3.3.1 多类名</h5><p>一个标签可以通过class来调用多个类选择器，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SCC字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.font</span> &#123;</span></span><br><span class="line">            font-family:'Times New Roman', Times, serif;</span><br><span class="line">            font-size: 18px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.red</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"font red"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"font"</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>嘿嘿嘿<span class="tag">&lt;/<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730014823.png" alt></p>
<h4 id="3-4-id选择器"><a href="#3-4-id选择器" class="headerlink" title="3.4 id选择器"></a>3.4 id选择器</h4><p>通过<code>#id名</code>定义，通过id进行调用，如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>SCC字体<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#red</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"red"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器端显示：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730015132.png" alt></p>
<h4 id="3-5-通配符选择器"><a href="#3-5-通配符选择器" class="headerlink" title="3.5 通配符选择器"></a>3.5 通配符选择器</h4><p>使用<code>*</code>,`定义将页面中所有标签选择出来更改样式，不需要进行调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、CSS字体属性"><a href="#4、CSS字体属性" class="headerlink" title="4、CSS字体属性"></a>4、CSS字体属性</h3><h4 id="4-1字体系列"><a href="#4-1字体系列" class="headerlink" title="4.1字体系列"></a>4.1字体系列</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    p &#123;</span><br><span class="line">        font-family: 'Times New Roman', Times, serif;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-字体大小"><a href="#4-2-字体大小" class="headerlink" title="4.2 字体大小"></a>4.2 字体大小</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>标题比较特殊需要手动修改</p>
<h4 id="4-3字体粗细"><a href="#4-3字体粗细" class="headerlink" title="4.3字体粗细"></a>4.3字体粗细</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-weight: bolder;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果使用数字后面不要加单位，700为加粗，400为normal；区间为：100-900；</p>
<h4 id="4-4-文字样式"><a href="#4-4-文字样式" class="headerlink" title="4.4 文字样式"></a>4.4 文字样式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-style: italic;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>倾斜italic、正常normal等；</p>
<h4 id="4-5-字体复合属性"><a href="#4-5-字体复合属性" class="headerlink" title="4.5 字体复合属性"></a>4.5 字体复合属性</h4><p>使用font来进行简写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font: font-style  font-size/line-height  font-family;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>复合属性的顺序不能更改，要按照上面的格式进行编写（字体样式、字体大小/行高、字体 ），size和family不能省略；</p>
<h3 id="5、文本属性"><a href="#5、文本属性" class="headerlink" title="5、文本属性"></a>5、文本属性</h3><h4 id="5-1-文本颜色"><a href="#5-1-文本颜色" class="headerlink" title="5.1 文本颜色"></a>5.1 文本颜色</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        color: rgb(119, 36, 78);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>预定义颜色值，十六进制、RGB代码；</p>
<h4 id="5-2-文本对齐"><a href="#5-2-文本对齐" class="headerlink" title="5.2 文本对齐"></a>5.2 文本对齐</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">         text-align: center;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>left、center、right</p>
<h4 id="5-3装饰文本"><a href="#5-3装饰文本" class="headerlink" title="5.3装饰文本"></a>5.3装饰文本</h4><p>下划线（underline）、删除线（line-through）、上划线（overline）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">div &#123;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="5-4-文本缩进"><a href="#5-4-文本缩进" class="headerlink" title="5.4 文本缩进"></a>5.4 文本缩进</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">    text-indent: 20px;</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">    text-indent: 2em;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>em为当前文字一个字的px，2em两个文字大小;</p>
<h4 id="5-5-行间距"><a href="#5-5-行间距" class="headerlink" title="5.5 行间距"></a>5.5 行间距</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">    line-height: 26px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>行高由上间距、文本高度、下间距构成，其中上下间距相等；</p>
<h3 id="6、CSS的引用"><a href="#6、CSS的引用" class="headerlink" title="6、CSS的引用"></a>6、CSS的引用</h3><h4 id="6-1-行内样式表"><a href="#6-1-行内样式表" class="headerlink" title="6.1 行内样式表"></a>6.1 行内样式表</h4><p>直接在标签的内部编写</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color: red; font-size: 18px;"</span>&gt;</span>行内样式表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-2-内部样式表"><a href="#6-2-内部样式表" class="headerlink" title="6.2 内部样式表"></a>6.2 内部样式表</h4><p>放在<code>&lt;style&gt;&lt;/style&gt;</code>标签中；控制范围为整个HTML页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="6-3-外部样式表"><a href="#6-3-外部样式表" class="headerlink" title="6.3 外部样式表"></a>6.3 外部样式表</h4><p>在外面单独写css文件，之后将css文件引入到HTML中使用；可以控制多个页面</p>
<p>1、文件后缀名为.css</p>
<p>2、在HTML页面中使用<code>&lt;link&gt;</code>标签引入这个文件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylrsheet"</span> <span class="attr">href</span> = <span class="string">"css文件路径"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* CSS文件中存放的代码 */</span></span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"mycss.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>外部css<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="7、Emmet语法"><a href="#7、Emmet语法" class="headerlink" title="7、Emmet语法"></a>7、Emmet语法</h3><p>emmet语法的前身是Zen coding，它使用缩写来提高HTML/CSS的编写速度，VScode内部已经集成了该语法;</p>
<p>在前端开发的过程中，最费时间的工作就是写 HTML、CSS 代码。一堆的标签、属性、括号等，头疼。这里推荐一个Emmet语法规则，让你写的时候爽到飞起，能大大提高代码书写，只需要敲一行代码就能生成你想要的完整HTML结构，下面会介绍如何使用。</p>
<p>Emmet是一款插件，只要能安装他的编辑器都能使用，大部分编辑器都可以使用该语法规则,我们平时开发的<code>Sublime Text</code>、<code>Eclipse</code>、<code>Notepad++</code>、<code>VS code</code>、<code>Atom</code>、<code>Dreamweaver</code>等等编辑器都可以使用。</p>
<h4 id="7-1-快速生成HTML结构语法"><a href="#7-1-快速生成HTML结构语法" class="headerlink" title="7.1 快速生成HTML结构语法"></a>7.1 快速生成HTML结构语法</h4><ol>
<li><p>生成标签直接输入标签名按tab键即可比如<code>div</code>然后tab键，就可以生成<code>&lt;div&gt; &lt;/div&gt;</code></p>
</li>
<li><p>如果想要生成多个相同标签加上<code>*</code>就可以了比如<code>div*3</code>就可以快速生成3个div</p>
</li>
<li><p>如果有父子级关系的标签，可以用<code>&gt;</code>比如<code>ul&gt;li</code>就可以生成<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt; &lt;/ul&gt;</code></p>
</li>
<li><p>如果有兄弟关系的标签，用<code>+</code>就可以了比如<code>div+p</code>,生成<code>&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;</code></p>
</li>
<li><p>如果生成带有类名或者id名字的，直接写<code>.demo</code> 或者<code>#two tab</code>键就可以了</p>
</li>
<li><p>如果生成的div类名是有顺序的，可以用自增符号<code>$</code>,例如：输入<code>.div$*3</code>则生成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果想要在生成的标签内部写内容可以用<code>{}</code>表示，可以与<code>$</code>一起使用。</p>
</li>
</ol>
<h4 id="7-2-快速生成CSS样式语法"><a href="#7-2-快速生成CSS样式语法" class="headerlink" title="7.2 快速生成CSS样式语法"></a>7.2 快速生成CSS样式语法</h4><p>CSS基本采取简写形式即可：</p>
<ol>
<li>比如<code>w200</code>按tab可以生成<code>width: 200px</code>;</li>
<li>比如<code>h26</code>按tab 可以性成<code>line-height 26px</code>;</li>
</ol>
<h4 id="7-3-快速格式化代码"><a href="#7-3-快速格式化代码" class="headerlink" title="7.3 快速格式化代码"></a>7.3 快速格式化代码</h4><p>在设置中搜索：<code>emmet.include</code><br>如图设置：<br><img src="http://qny.suixinya.top/HexoBlog/VScodeFormat.png" alt="emmet.inlude配置"><br>在json文件中添加以下添加代码：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"editor.formatOnType": true,</span><br><span class="line">"editor.formatOnSave": true</span><br></pre></td></tr></table></figure>
<h3 id="8、复合选择器"><a href="#8、复合选择器" class="headerlink" title="8、复合选择器"></a>8、复合选择器</h3><p>在CSS中，可以根据选择器的类型分为  <strong>基础选择器</strong>  和 <strong>复合选择器</strong>，复合选择器建立在基础选择器之上，对基础选择器进行组合形成的。目的是为了可以选择更准确更精细的目标元素标签。</p>
<p>比如：   <code>div .class1</code>  (注意之间有空格) 选择的是： 类名为 <code>.class1</code>  的div标签。  </p>
<h4 id="8-1-后代选择器（重要）"><a href="#8-1-后代选择器（重要）" class="headerlink" title="8.1 后代选择器（重要）"></a>8.1 后代选择器（重要）</h4><p>语法：元素1 元素2 { 样式声名 }</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">h1</span> <span class="selector-tag">em</span> &#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面这个规则会把作为 h1 元素后代的 em 元素的文本变为 红色。其他 em 文本（如段落或块引用中的 em）则不会被这个规则选中：</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ol li &#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul li &#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ol的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是ul的li标签<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730015213.png" alt></p>
<p>逐层查找就可以，可以是基础选择器的组合。</p>
<h4 id="8-2-子选择器（重要）"><a href="#8-2-子选择器（重要）" class="headerlink" title="8.2 子选择器（重要）"></a>8.2 子选择器（重要）</h4><p>必须是<strong>亲儿子</strong>，不能是孙子或者其他，</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">元素1&gt;元素2 &#123; 样式声名 &#125;</span><br></pre></td></tr></table></figure>
<h4 id="8-3-并集选择器（重要）"><a href="#8-3-并集选择器（重要）" class="headerlink" title="8.3 并集选择器（重要）"></a>8.3 并集选择器（重要）</h4><p>并集选择器可以选择多组标签同时为他们定义相同的样式。通常用于集体声明</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">元素1,元素2 &#123; 样式声名 &#125;</span><br></pre></td></tr></table></figure>
<p>并集选择器习惯竖着写，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	div,</span><br><span class="line">	p,</span><br><span class="line"><span class="css">	<span class="selector-class">.red</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line">    	color: red;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="8-4-伪类选择器"><a href="#8-4-伪类选择器" class="headerlink" title="8.4 伪类选择器"></a>8.4 伪类选择器</h4><p>伪类选择器用于向某些选择器添加特殊的效果，比如给链接添加特殊效果,或选择第1个,第n个元素。</p>
<p>伪类选择器书写最大的特点是用置号(:)示，比如<code>:hover</code>、<code>:first-child</code>。</p>
<h5 id="8-4-1-链接伪类选择器"><a href="#8-4-1-链接伪类选择器" class="headerlink" title="8.4.1 链接伪类选择器"></a>8.4.1 链接伪类选择器</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">a:link  	/*选择所有未被访问的链接*/</span><br><span class="line">a:visited 	/*选择所有已被访问的链接*/</span><br><span class="line">a:hover 	/*选择鼠标指针位于其上的链接*/</span><br><span class="line">a:active 	/*选择活动链接(鼠标按下末弹起的链接) */</span><br></pre></td></tr></table></figure>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line">            color: black;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line">            color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>随心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：这四个链接伪类选择器顺序不能颠倒，LVHA</p>
<p>记忆口诀：love hate或者lv包包hao</p>
<p><strong>开发中常用方式：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	a &#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span></span><br><span class="line">    text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>:<span class="selector-id">#369</span>;</span></span><br><span class="line">    text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="8-4-2-focus伪类选择器"><a href="#8-4-2-focus伪类选择器" class="headerlink" title="8.4.2 :focus伪类选择器"></a>8.4.2 :focus伪类选择器</h5><p><code>:focus</code>伪类选择器用于选取获得焦点的表单元素。<br>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取,因此这个选择器也主要针对于表单元素来说。</p>
<p>语法示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">    background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9、CSS的元素显示模式"><a href="#9、CSS的元素显示模式" class="headerlink" title="9、CSS的元素显示模式"></a>9、CSS的元素显示模式</h3><p>HTML元素一般分为<strong>块元素</strong>和<strong>行内元素</strong>两种类型。</p>
<h4 id="9-1-块元素"><a href="#9-1-块元素" class="headerlink" title="9.1 块元素"></a>9.1 块元素</h4><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、 &lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等 。其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p>
<p><strong>块级元素的特点:</strong></p>
<p>1、比较霸道，自己独占一行。</p>
<p>2、高度、宽度、外边距以及内边距都可以控制。</p>
<p>3、宽度默认是容器(父级宽度)的100%。</p>
<p>4、是一个容器及盒子,里面可以放行内或者块级元素。</p>
<blockquote>
<p>PS：文字类的元素内不能使用块元素</p>
</blockquote>
<h4 id="9-2-行内元素（内联元素）"><a href="#9-2-行内元素（内联元素）" class="headerlink" title="9.2 行内元素（内联元素）"></a>9.2 行内元素（内联元素）</h4><p>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、 &lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等 ,其中<br><code>&lt;span&gt;</code>标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</p>
<p><strong>行内元素的特点:</strong></p>
<p>1、相邻行内元素在一行上,一行可以示多个。</p>
<p>2、高、宽直接设置是无效的。</p>
<p>3、默认宽度就是它本身内容的宽度。</p>
<p>4、行内元素只能容纳文本或其他行内元素。</p>
<blockquote>
<p>PS：链接里不能再放链接，<a>里可以放块元素，但是给<a>转换一下块级模式最安全</a></a></p>
</blockquote>
<h4 id="9-3-行内块元素"><a href="#9-3-行内块元素" class="headerlink" title="9.3 行内块元素"></a>9.3 行内块元素</h4><p>在行内元素中有几个特殊的标签一<code>&lt;img/&gt;、&lt;input/&gt;、&lt;td&gt;</code>它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</p>
<p><strong>行内块元素的特点:</strong></p>
<p>1、和相邻行内元素(行内块)在一行上,但是他们之间会有空白缝隙一行可以显示多个(行内元素特点)。</p>
<p>2、默认宽度就是它本身内容的宽度(行内元素特点)。</p>
<p>3、高度,行高、外边距以及内边距都可以控制(块级元素特点)。</p>
<h3 id="10、元素显示模式转换"><a href="#10、元素显示模式转换" class="headerlink" title="10、元素显示模式转换"></a>10、元素显示模式转换</h3><p>特殊情况下，我们需要元素模式的转换,简单理解一个模式的元素需要另外一 种模式的特性比如想要增加链接<code>&lt;a&gt;</code>的触发范围。</p>
<p><strong>把行内元素转化为 块级元素:</strong><br>display: block;</p>
<p>代码示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        a &#123;</span><br><span class="line">            color: black;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            background: red;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 50px;</span><br><span class="line"><span class="css">            <span class="comment">/* 把行内元素转化为 块级元素 */</span></span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>随心<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730015316.png" alt></p>
<ul>
<li>转换为块元素: <code>display:block</code>;</li>
<li>转换为行内元素: <code>display:inline</code>;</li>
<li>转换为行内块: <code>display:inline-block</code>,</li>
</ul>
<p>综合示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MI<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        a &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            width: 230px;</span><br><span class="line">            height: 40px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#555555</span>;</span></span><br><span class="line">            font-size: 14px;</span><br><span class="line">            color: white;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            text-indent: 3em;</span><br><span class="line"><span class="css">            <span class="selector-tag">line-height</span>: 40<span class="selector-tag">px</span>;<span class="comment">/*文字垂直居中*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: rgb(255, 81, 0);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>电视 盒子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>笔记本 平板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>出行 穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>智能路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>健康 儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>显示效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730015425.png" alt></p>
<h3 id="11、CSS背景"><a href="#11、CSS背景" class="headerlink" title="11、CSS背景"></a>11、CSS背景</h3><p>一般情通过CSS背景属性。可以给页面元素添加背景样式。</p>
<p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>
<h4 id="11-1-背景颜色"><a href="#11-1-背景颜色" class="headerlink" title="11.1 背景颜色"></a>11.1 背景颜色</h4><p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-color: 颜色值;</span><br></pre></td></tr></table></figure>
<p>一般情况下元素背景颜色默认为：transparent（透明）</p>
<h4 id="11-2-背景图片"><a href="#11-2-背景图片" class="headerlink" title="11.2 背景图片"></a>11.2 背景图片</h4><p>background-image属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片,优点是非常便于控制位置(精灵图也是一种运用场景)</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-image: none | url();</span><br><span class="line">background-image:url(picture.jpg);</span><br></pre></td></tr></table></figure>
<h4 id="11-3-背景平铺"><a href="#11-3-背景平铺" class="headerlink" title="11.3 背景平铺"></a>11.3 背景平铺</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* 默认为平铺 background-repeat: repeat; */</span><br><span class="line">background-repeat: no-repeat;</span><br></pre></td></tr></table></figure>
<h4 id="11-4-背景位置"><a href="#11-4-背景位置" class="headerlink" title="11.4 背景位置"></a>11.4 背景位置</h4><p>利用background-position属性可以改变图片在背景中的位置。</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-position:方位名词 / x y;</span><br></pre></td></tr></table></figure>
<p><strong>参数是方位名词情景</strong></p>
<p>如果指定的两个值都是方位名词，则两个值前后顺序无关,比如left top和top left 效果一致；如果只指定了一个方位名词,另-个值省略,则第二个值默认居中对齐；<br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &#123;</span><br><span class="line">        background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        background-position: center top;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>参数是精确单位情景</strong></p>
<p>如果参数值是精确坐标，第一个是x坐标，第二个定是y坐标；<br>如果只指定一个数值。该数值是x坐标，另一个默认垂直居中；</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	body &#123;</span><br><span class="line">    background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: 20px 50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">	body &#123;</span><br><span class="line">    background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: 20px 50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面这两个不一样，顺序一定是x，y的顺序</p>
<p><strong>方位名词和精确单位混合</strong></p>
<p>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: 50px center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: center 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="11-5-背景图像固定（背景附着）"><a href="#11-5-背景图像固定（背景附着）" class="headerlink" title="11.5 背景图像固定（背景附着）"></a>11.5 背景图像固定（背景附着）</h4><p><code>background-attachment</code>属性设置背景图像是否固定或者随着页面的其余部分滚动。</p>
<p><code>background-attachment</code>可以制作视差滚动效果。</p>
<p> 语法格式：<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background-attachment: scroll |fixed;</span><br><span class="line">/*scroll跟随内容滚动(默认)，fixed固定背景*/</span><br></pre></td></tr></table></figure><br> 示例代码：<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> body &#123;</span><br><span class="line">    background-image: url(http://qny.suixinya.top/HexoBlog/jpg.jpg);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-position: center top;</span><br><span class="line">    color: #ffffff;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    background-attachment: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="11-6-背景复合写法"><a href="#11-6-背景复合写法" class="headerlink" title="11.6 背景复合写法"></a>11.6 背景复合写法</h4><p> 为了简化背景属性的代码,我们可以将这些属性合并简写在同一个属性background中。从而节约代码量。</p>
<p> <strong>顺序不像字体要按一定的格式顺序</strong></p>
<p> 一般按照：<br> background:背景颜色、背景图片地址、背景平铺、背景图像滚动、背景图片位置:</p>
<p> 示例：<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background: white url(http://qny.suixinya.top/HexoBlog/jpg.jpg) no-repeat fixed center top;</span><br></pre></td></tr></table></figure></p>
<h4 id="11-7-背景颜色半透明"><a href="#11-7-背景颜色半透明" class="headerlink" title="11.7 背景颜色半透明"></a>11.7 背景颜色半透明</h4><p> 语法：<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">background: rgba(0, 0, 0, 0.5);</span><br></pre></td></tr></table></figure><br> 最后一个参数是alpha透明度,取值范围在0~1之间。</p>
<p><strong>综合案例</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 120px;</span><br><span class="line">            height: 58px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 58px;</span><br><span class="line">            color: white;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-class">.bg1</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: violet;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-class">.bg2</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-class">.bg3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-class">.bg4</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: tomato;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.nav</span> <span class="selector-class">.bg5</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            background-color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bg1"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bg2"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bg3"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bg4"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"bg5"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>浏览器端显示：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730015522.png" alt></p>
<h3 id="12、CSS的三大特性"><a href="#12、CSS的三大特性" class="headerlink" title="12、CSS的三大特性"></a>12、CSS的三大特性</h3><p>CSS有三个非常重要的三个特性:层曼性、继承性、优先级。</p>
<h4 id="12-1层叠性"><a href="#12-1层叠性" class="headerlink" title="12.1层叠性"></a>12.1层叠性</h4><p>相同选择器给设置相同的样式，此时一个样式就会覆盖(层叠)另一个冲突的样式层叠性主要解决样式冲突的问题。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    color: tomato;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">    color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>遵循就近原则，只覆盖样式冲突的部分；</p>
<h4 id="12-2-继承性"><a href="#12-2-继承性" class="headerlink" title="12.2 继承性"></a>12.2 继承性</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            color: tomato;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>div里的p也会有div里文字相关的样式、行高和颜色等，不会教程高度宽度等；并不是所有的样式都继承；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    font: 12px/1.5 Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.5是指行高为当前文字大小的1.5倍</p>
<h4 id="12-3-优先级"><a href="#12-3-优先级" class="headerlink" title="12.3 优先级"></a>12.3 优先级</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            color: tomato;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.test</span> &#123;</span></span><br><span class="line">            color: black;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>是随心吖!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最终颜色为：black</p>
<p>级别的优先级顺序为：（更详细信息请参考元素选择器权重）</p>
<ol>
<li>继承 或者 *</li>
<li>元素选择器</li>
<li>类选择器、伪类选择器</li>
<li>ID选择器</li>
<li>行内样式 style=””</li>
<li>!important 重要的<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    div &#123;</span><br><span class="line">        color: tomato !important;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.test</span> &#123;</span></span><br><span class="line">        color: black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>
继承的权重为0；示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#father</span> &#123;</span></span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p &#123;</span><br><span class="line">            color: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>是随心吖！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
最后color为blue；</li>
</ol>
<p><strong>权重叠加，永远不会有进位</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div ul li   权重为：0,0,0,3</span><br><span class="line">.nav ul li  权重为：0,0,1,2</span><br><span class="line">a:hover     权重为：0,0,1,1</span><br><span class="line">.nav a      权重为：0,0,1,1</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS系列笔记（三）</title>
    <url>/2020/02/02/CSS%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730020118.png" alt="盒子模型"></p>
<p>网页设计中常听的属性名：内容(content)、内边距(padding)、边框(border)、外边距(margin)， CSS盒子模型都具备这些属性。这些属性我们可以用日常生活中的常见事物——盒子作一个比喻来理解，所以叫它盒子模型。CSS盒子模型就是在网页设计中经常用到的CSS技术所使用的一种思维模型。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、盒子模型"><a href="#1、盒子模型" class="headerlink" title="1、盒子模型"></a>1、盒子模型</h3><p>页面布局要学习3三大核心,盒子模型,浮动和定位，学习好盒子模型能非常好的帮助我们布局页面。</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730020118.png" alt="盒子模型"></p>
<ul>
<li>内容区域 - 代表盒子的实际内容部分，它是由 width 宽度和 height 高度来确定的</li>
<li>内间距区域 - 代表盒子与实际内容之间的空白区域，由 padding 属性设置</li>
<li>边框区域 - 代表盒子的边框，是内间距区域和外边距区域的边界，由 border 属性设置</li>
<li>外边距区域 - 代表此盒子的边框与相邻的其他盒子边框之间的距离，由 margin 属性设置</li>
</ul>
<p><strong>网页布局过程:</strong></p>
<p>1.先准备好相关的网页元素。网页元素基本都是盒子Box。</p>
<p>2.利用CSS设好盒子样式,然后摆放到相应位置。</p>
<p>3.往盒子里面装内容。</p>
<h4 id="1-2-盒子模型的组成"><a href="#1-2-盒子模型的组成" class="headerlink" title="1.2 盒子模型的组成"></a>1.2 盒子模型的组成</h4><p>所谓盒子模型:就是把HTML页面中的布局元素看作是一个矩形的盒子，也就是一个盛装内容的容器。</p>
<p>CSS盒子模型本质上是一个盒子，封装周围的HTML元素。它包括：边框、外边距、内边距、和实际内容</p>
<h4 id="1-3-边框-border"><a href="#1-3-边框-border" class="headerlink" title="1.3 边框(border)"></a>1.3 边框(border)</h4><p>border可以设置元素的边框。边框有三部分组成边框宽度(粗细)、边框样式、边框颜色；</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border: border-width || border-style || border-color;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 300px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border-width: 2px;</span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-color: rgb(255, 123, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复合写法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border: 2px solid red;</span><br></pre></td></tr></table></figure>
<p>没有先后顺序</p>
<p><strong>上下左右边框设定：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border-top: red 2px solid;</span><br></pre></td></tr></table></figure>
<p>以上示例为上边框，其余边框类似；</p>
<p><strong>边框会影响盒子的实际大小</strong></p>
<h4 id="1-4-内边距（padding）"><a href="#1-4-内边距（padding）" class="headerlink" title="1.4 内边距（padding）"></a>1.4 内边距（padding）</h4><p>padding属性用来设置边框和内容之间的距离；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">padding-left</span><br><span class="line">padding-right</span><br><span class="line">padding-top</span><br><span class="line">padding-bottom</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">padding-left: 20px;</span><br><span class="line">padding-top: 20px;</span><br></pre></td></tr></table></figure>
<p><strong>复合写法：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">padding: 5px;                       /*一个值，上下左右都设置为5px*/</span><br><span class="line">padding: 5px 10px;                  /*两个值，上下为5px，左右为10px*/</span><br><span class="line">padding: 5px 10px 20px;             /*上5px，左右10px，下20px*/</span><br><span class="line">padding: 5px 10px 20px 30px;        /*四个值，分别为上、右、下、左，顺时针*/</span><br></pre></td></tr></table></figure>
<p><strong>内边距也会影响盒子的实际大小</strong></p>
<h4 id="1-5-外边距（margin）"><a href="#1-5-外边距（margin）" class="headerlink" title="1.5 外边距（margin）"></a>1.5 外边距（margin）</h4><p>margin属性用于设置盒子和盒子之间的距离</p>
<p>语法格式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">margin-left /*左外边距*/</span><br><span class="line">margin-right</span><br><span class="line">margin-top</span><br><span class="line">margin-bottom</span><br></pre></td></tr></table></figure>
<p><strong>margin的简写方式规则和padding完全一致</strong></p>
<p>外边距可以让块级盒子水平居中，但是必须满足两个条件:</p>
<p>1、盒子必须指定了宽度(<code>width</code>)；</p>
<p>2、盒子左右的外边距都设置为<code>auto</code>；</p>
<p>常用写法示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">margin: 0 auto;</span><br><span class="line">margin: auto;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元索水平居中给其元素添加<code>text-align:center</code>即可。</p>
</blockquote>
<p><strong>嵌套块元素垂直外边距的塌陷</strong></p>
<p>解决方案:</p>
<p>1、可以为父元素定义上边框。</p>
<p>2、可以为父元素定义上内边距。</p>
<p>3、可以为父元素添加<code>overflow:hidden</code>。</p>
<h4 id="1-6-清除内外边距"><a href="#1-6-清除内外边距" class="headerlink" title="1.6 清除内外边距"></a>1.6 清除内外边距</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">    padding: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>去除li前面的小圆点</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">list-style: none;</span><br></pre></td></tr></table></figure>
<h3 id="2、圆角边框"><a href="#2、圆角边框" class="headerlink" title="2、圆角边框"></a>2、圆角边框</h3><p><code>border-radius</code>属性用于设置元素的外边框圆角</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border-radius: length;</span><br><span class="line"><span class="comment">&lt;!--border-radius: 30px; 可以使用百分比--&gt;</span></span><br></pre></td></tr></table></figure>
<p>复合写法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border-radius: 10px 20px 30px 40px;</span><br></pre></td></tr></table></figure>
<p>四个值分别为：左上角 右上角 右下角 左下角，顺时针</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">border-radius: 10px 20px;</span><br></pre></td></tr></table></figure>
<p>如果是两个值，是对角线关系，左上角和右下角为10px，右上角和左下角为20px；</p>
<p>也可以这样分开写: <code>border-top-left-radius</code>、 <code>border-top-right-radius</code>、 <code>border-bottom-right-radius</code>和<code>border-bottom-left-radius</code>；</p>
<p><strong>设置圆形</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    margin: 100px auto;</span><br><span class="line">    background-color: pink;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、盒子阴影"><a href="#3、盒子阴影" class="headerlink" title="3、盒子阴影"></a>3、盒子阴影</h3><p>CSS3中新增了盒子阴影,我们可以使用<code>box-shadow</code>属性为盒子添加阴影。<br>语法格式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box-shadow: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure>
<p><code>h-shadow</code> <code>v-shadow</code>为必需，内阴影外阴影默认为<code>outside</code>但是不能写<code>outside</code></p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">box-shadow: 30px 30px 20px 10px rgba(0, 0, 0, 0.3) inset;</span><br></pre></td></tr></table></figure>
<p>综合示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">box-shadow</span>: 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.3</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730021150.png" alt="效果"></p>
<h3 id="4、文字阴影"><a href="#4、文字阴影" class="headerlink" title="4、文字阴影"></a>4、文字阴影</h3><p>在CSS3中，我们可以使用text-shadow属性将阴影应用于文本。</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">box-shadow: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>参考文章：</p>
<p><a href="https://zxuqian.cn/docs/css/box-model/box-model/" target="_blank" rel="noopener">CSS盒子模型</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS系列笔记（二）</title>
    <url>/2020/01/31/CSS%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>这篇笔记包括精灵图，字体图标，SCC生成三角模型，用户样式，文字溢出处理，CSS初始化，布局技巧等内容。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、精灵图"><a href="#1、精灵图" class="headerlink" title="1、精灵图"></a>1、精灵图</h3><h4 id="1-1-为什么需要精灵图"><a href="#1-1-为什么需要精灵图" class="headerlink" title="1.1 为什么需要精灵图"></a>1.1 为什么需要精灵图</h4><p>一个网页中往往会应用很多小的背景图像作为修饰,当网页中的图像过多时。服务器就会频繁地接收和发送请求图片。造成服务器请求压力过大，这将大大降低页面的加载速度。因此，为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术(也称CSS Sprites. CSS雪碧)。</p>
<p>核心原理：将网页中的一些小背景图像整合到一张大图中,这样服务器只需要一次请求就可以了。</p>
<h4 id="1-2使用精灵图核心"><a href="#1-2使用精灵图核心" class="headerlink" title="1.2使用精灵图核心:"></a>1.2使用精灵图核心:</h4><ol>
<li>精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中；</li>
<li>这个大图片也称为sprites精灵图或者雪碧图；</li>
<li>移动背景图片位置，此时可以使用<code>background-position</code>属性；</li>
<li>移动的距离就是这个目标图片的x和y坐标。</li>
<li>因为一般情况下都是往上往左移动，所以数值是负值。</li>
</ol>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">width: 60px;</span><br><span class="line">height: 60px;</span><br><span class="line">margin: 100px auto;</span><br><span class="line">background: url( images/sprites.png) no-repeat -182px 0;</span><br></pre></td></tr></table></figure>
<h3 id="2、字体图标"><a href="#2、字体图标" class="headerlink" title="2、字体图标"></a>2、字体图标</h3><p>字体图标使用场景：主要用于显示网页中通用、常用的一些小图标。</p>
<p>精灵图是有诸多优点的，但是缺点很明显：</p>
<ol>
<li>图片文件还是比较大的。</li>
<li>图片本身放大和缩小会失真。</li>
<li>图片制作完毕想要更换就会非常复杂。</li>
</ol>
<p>此时，有一种技术的出现很好的解决了以上问题，就是字体图标iconfont。</p>
<p>字体图标可以为前端工程师提供一种方便高效的图标使用方式，展示的是图标，本质属于字体。</p>
<h4 id="2-1-使用字体图标的优点"><a href="#2-1-使用字体图标的优点" class="headerlink" title="2.1 使用字体图标的优点"></a>2.1 使用字体图标的优点</h4><ul>
<li>轻量级：一个图标字体要比一系列的图像要小只要字体加载了，图标就会马上渲染出来减少了服务器请求；</li>
<li>灵活性：本质其实是文字，可以很随意的改变颜色产生阴影、透明效果、旋转等；</li>
<li>兼容性：几乎支持所有的浏览器；</li>
</ul>
<p>字体图标是一些网页常见的小图标，我们直接网上下载即可。因此使用可以分为:</p>
<ol>
<li>字体图标的下载</li>
<li>字体图标的引入</li>
<li>字体图标的追加</li>
</ol>
<h4 id="2-2-字体图标的下载地址"><a href="#2-2-字体图标的下载地址" class="headerlink" title="2.2 字体图标的下载地址:"></a>2.2 字体图标的下载地址:</h4><ol>
<li><a href="http://icomoon.io" target="_blank" rel="noopener">icomoon字库</a></li>
<li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里icofont字库</a></li>
</ol>
<h4 id="2-3-字体图标的使用"><a href="#2-3-字体图标的使用" class="headerlink" title="2.3 字体图标的使用"></a>2.3 字体图标的使用</h4><ol>
<li>下载好之后将font文件夹放入我们页面文件目录；</li>
<li>在CSS样式中全局声明字体，简单理解把这些字体文件通过css引入到我们页面中。（注意字体文件路径的问题。）</li>
<li>style文件里可以复制格式代码；</li>
<li>Demo文件夹里可以复制字体图标；</li>
</ol>
<h3 id="3、CSS三角"><a href="#3、CSS三角" class="headerlink" title="3、CSS三角"></a>3、CSS三角</h3><p>使用CSS样式生成三角形；</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* border: 10px solid skyblue; */</span></span></span><br><span class="line">            border-top: 10px solid skyblue;</span><br><span class="line">            border-right: 10px solid blue;</span><br><span class="line">            border-bottom: 10px solid red;</span><br><span class="line">            border-left: 10px solid green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line">            width: 0;</span><br><span class="line">            height: 0;</span><br><span class="line"><span class="css">            <span class="comment">/* border: 10px solid skyblue; */</span></span></span><br><span class="line">            border-top: 50px solid red;</span><br><span class="line">            border-right: 50px solid transparent;</span><br><span class="line">            border-bottom: 50px solid transparent;</span><br><span class="line">            border-left: 50px solid transparent;</span><br><span class="line">            margin: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730014349.png" alt="CSS三角"></p>
<h3 id="4、CSS用户界面样式"><a href="#4、CSS用户界面样式" class="headerlink" title="4、CSS用户界面样式"></a>4、CSS用户界面样式</h3><h4 id="4-1-更改用户鼠标样式"><a href="#4-1-更改用户鼠标样式" class="headerlink" title="4.1 更改用户鼠标样式"></a>4.1 更改用户鼠标样式</h4><p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">li&#123;</span><br><span class="line">    cursor: pointer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>属性值：</p>
<ul>
<li><code>default</code>              默认</li>
<li><code>pointer</code>              小手</li>
<li><code>move</code>                     移动</li>
<li><code>text</code>                     文本</li>
<li><code>not-allowed</code>       禁止<br>示例：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>鼠标样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor: default;"</span>&gt;</span>默认<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span>&gt;</span>小手<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor: move;"</span>&gt;</span>移动<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor: text;"</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"cursor: not-allowed;"</span>&gt;</span>禁止<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-表单轮廓"><a href="#4-2-表单轮廓" class="headerlink" title="4.2 表单轮廓"></a>4.2 表单轮廓</h4></li>
</ul>
<p>outline （轮廓）是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<p><strong>注释：</strong>轮廓线不会占据空间，也不一定是矩形。</p>
<p>outline 简写属性在一个声明中设置所有的轮廓属性。</p>
<p>可以按顺序设置如下属性：</p>
<ul>
<li>outline-color</li>
<li>outline-style</li>
<li>outline-width</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p  &#123;</span><br><span class="line">  outline:#00FF00 dotted thick;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-3-防止表单域拖拽"><a href="#4-3-防止表单域拖拽" class="headerlink" title="4.3 防止表单域拖拽"></a>4.3 防止表单域拖拽</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">textarea &#123;</span><br><span class="line">    resize: none;</span><br><span class="line">    outline: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5、vertical-align属性应用"><a href="#5、vertical-align属性应用" class="headerlink" title="5、vertical-align属性应用"></a>5、vertical-align属性应用</h3><p>CSS的<code>vertical-align</code>属性使用场景：经常用于设图片或者表单(行内块元素)和文字垂直对齐。<br>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">vertical-align: baseline;</span><br></pre></td></tr></table></figure>
<p>属性值：</p>
<ul>
<li><code>baseline</code> 默认，元素放在父元素的基线上</li>
<li><code>top</code> 把元素的顶端与行中最高元素的顶端对齐</li>
<li><code>middle</code> 把此元素放在父元素的中部</li>
<li><code>bottom</code> 把元素的顶端与行中最低的元素的顶端对齐</li>
</ul>
<h4 id="5-1-解决图片底部默认空白缝隙问题"><a href="#5-1-解决图片底部默认空白缝隙问题" class="headerlink" title="5.1 解决图片底部默认空白缝隙问题"></a>5.1 解决图片底部默认空白缝隙问题</h4><p><code>bug</code> ：图片底侧会有一个空白缝隙 ,原因是行内块元素会和文字的基线对齐。</p>
<p>解决方案：</p>
<ol>
<li>给图片添加vertical-align:middle| topl bottom等。(提倡使用的)</li>
<li>把图片转换为块级元素display: block;</li>
</ol>
<h3 id="6、溢出文字省略号"><a href="#6、溢出文字省略号" class="headerlink" title="6、溢出文字省略号"></a>6、溢出文字省略号</h3><h4 id="6-1-单行文本溢出"><a href="#6-1-单行文本溢出" class="headerlink" title="6.1 单行文本溢出"></a>6.1 单行文本溢出</h4><p>需要满足条件：</p>
<ol>
<li>先强制一行内显示文本 white-space: nowrap;</li>
<li>超出部分隐藏 overflow: hidden;</li>
<li>文字用省略号代替超出的部分 text-overflow: ellipsis;</li>
</ol>
<h4 id="6-2-多行文本溢出"><a href="#6-2-多行文本溢出" class="headerlink" title="6.2 多行文本溢出"></a>6.2 多行文本溢出</h4><p>多行文本溢出显示省略号，有较大兼容性问题，适合于webKit浏览器或移动端(移动端大部分是webkit内核)</p>
<ol>
<li>超出部分隐藏<code>overflow: hidden</code>;</li>
<li>文字用省略号代替超出的部分 <code>text-overflow: ellipsis</code>;</li>
<li>弹性伸缩盒子模型显示 <code>display: -webkit-box</code>;</li>
<li>限制在一个块元素显示的文本的行数 <code>webkit-line-clamp: 2</code>;</li>
<li>设置或检索伸缩盒对象的子元素的排列方式<code>webkit-box-orient: vertical</code>;</li>
</ol>
<h3 id="7、常见布局技巧"><a href="#7、常见布局技巧" class="headerlink" title="7、常见布局技巧"></a>7、常见布局技巧</h3><h4 id="7-1-margin-负值"><a href="#7-1-margin-负值" class="headerlink" title="7.1 margin 负值"></a>7.1 margin 负值</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">ul li &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    list-style: none;</span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin-left: -1px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        ul li &#123;</span><br><span class="line"><span class="css">            <span class="comment">/* position: relative; */</span></span></span><br><span class="line">            float: left;</span><br><span class="line">            list-style: none;</span><br><span class="line">            width: 150px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            border: 1px solid black;</span><br><span class="line">            margin-left: -1px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="comment">/* z-index: 1; */</span></span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730013929.png" alt="margin负值布局效果"></p>
<h4 id="7-2-文字围绕浮动元素"><a href="#7-2-文字围绕浮动元素" class="headerlink" title="7.2 文字围绕浮动元素"></a>7.2 文字围绕浮动元素</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 70px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            padding: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.pic</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            width: 80px;</span><br><span class="line">            height: 70px;</span><br><span class="line">            background-color: red;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pic"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>随心贰拾肆随心贰拾肆</span><br><span class="line">            随心贰拾肆随心贰拾肆</span><br><span class="line">            随心贰拾肆<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730013743.png" alt="文字围绕浮动元素效果"></p>
<h4 id="7-3-行内块巧妙运用"><a href="#7-3-行内块巧妙运用" class="headerlink" title="7.3 行内块巧妙运用"></a>7.3 行内块巧妙运用</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 36px;</span><br><span class="line">            height: 36px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 36px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            color: black;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-class">.prev</span> &#123;</span></span><br><span class="line">            width: 85px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-class">.next</span> &#123;</span></span><br><span class="line">            width: 85px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"prev"</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="symbol">&amp;lt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="symbol">&amp;gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>分页显示效果：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730014110.png" alt></p>
<h3 id="8、CSS初始化"><a href="#8、CSS初始化" class="headerlink" title="8、CSS初始化"></a>8、CSS初始化</h3><p>不同浏览器对有些标签的默认值是不同的，为了消滁不同浏览器对HTML文本呈现的差异，照顾刘览器的兼容，我们需要对CSS初始化；</p>
<p><strong>简单理解：</strong><br>CSS初始化是指重设浏览器的样式。(也称为CSSreset )</p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS系列笔记（四）</title>
    <url>/2020/02/03/CSS%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>主要记录浮动、布局、定位方面的内容；</p>
<p>CSS 为定位和浮动提供了一些属性，利用这些属性，可以建立列式布局，将布局的一部分与另一部分重叠，还可以完成多年来通常需要使用多个表格才能完成的任务。</p>
<p>定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、浮动"><a href="#1、浮动" class="headerlink" title="1、浮动"></a>1、浮动</h3><p><strong>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。</strong></p>
<p><strong>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。</strong></p>
<h4 id="1-1-传统网页布局的3种方式"><a href="#1-1-传统网页布局的3种方式" class="headerlink" title="1.1 传统网页布局的3种方式"></a>1.1 传统网页布局的3种方式</h4><p>网页布局的本质一用CSS来摆放盒子。把盒子摆放到相应位置。</p>
<ol>
<li>普通流（标准流）</li>
<li>浮动</li>
<li>定位<h4 id="1-2-普通流（标准流）"><a href="#1-2-普通流（标准流）" class="headerlink" title="1.2 普通流（标准流）"></a>1.2 普通流（标准流）</h4>所谓的标准流：就是标签按照规定好默认方式排列；<h4 id="1-3-浮动（float）"><a href="#1-3-浮动（float）" class="headerlink" title="1.3 浮动（float）"></a>1.3 浮动（float）</h4>有很多的布局效果，标准流没有办法完成。此时就可以利用浮动完成布局。因为浮动可以改变元素标签默认的排列方式；</li>
</ol>
<p>浮动最典型的应用：可以让多个块级元素一行内排列显示。</p>
<p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动。</p>
<p><strong>float属性用于创建浮动框,将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘；</strong><br>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;float: 属性值;&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>贰拾肆呀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>随心吖<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730022253.png" alt="效果"></p>
<h4 id="1-4-浮动的特性"><a href="#1-4-浮动的特性" class="headerlink" title="1.4 浮动的特性"></a>1.4 浮动的特性</h4><ol>
<li>浮动元素会脱离标准流(脱标)，不再保留用来的位置，让其他标准流去占有；</li>
<li>浮动的元素会在一行内显示并且元素顶部对齐；</li>
<li>浮动的元素会具有行内块元素的特性；</li>
</ol>
<p>为了约束浮动元素位置，网页布局一般采取的措施：<strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置符合网页布局第一准则；</strong><br>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 1200px;</span><br><span class="line">            height: 460px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line">            width: 230px;</span><br><span class="line">            height: 460px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line">            width: 970px;</span><br><span class="line">            height: 460px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730022438.png" alt></p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            padding: 0;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 1226px;</span><br><span class="line">            height: 285px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 296px;</span><br><span class="line">            height: 285px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-right: 14px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css"><span class="comment">/* 要注意权重的问题 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-class">.last</span> &#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"last"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730022525.png" alt></p>
<p>这个示例有权重问题，一定要使用.box .last这个选择器；</p>
<h3 id="2、常见的网页布局"><a href="#2、常见的网页布局" class="headerlink" title="2、常见的网页布局"></a>2、常见的网页布局</h3><h4 id="2-1-常见网页布局"><a href="#2-1-常见网页布局" class="headerlink" title="2.1 常见网页布局"></a>2.1 常见网页布局</h4><p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>LayoutDemo01<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        * &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">            padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.top</span> &#123;</span></span><br><span class="line">            height: 50px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line">            width: 980px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            margin: 10px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        li &#123;</span><br><span class="line">            list-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 978px;</span><br><span class="line">            margin: 0 auto;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">            width: 237px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            float: left;</span><br><span class="line">            margin-right: 10px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> <span class="selector-class">.last</span> &#123;</span></span><br><span class="line">            margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">            margin-top: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span>banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"last"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730022730.png" alt></p>
<h3 id="3、清除浮动"><a href="#3、清除浮动" class="headerlink" title="3、清除浮动"></a>3、清除浮动</h3><p>父级盒子的高度在很多情况下不方便给固定高度；但是盒子浮动就不占有原来的位置，最后父级盒子的高度就会为0，会影响标准流的盒子；为了让孩子撑开父级盒子；此时我们就要清除浮动；</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123;clear: 属性值&#125;</span><br></pre></td></tr></table></figure>
<p>属性值：</p>
<ol>
<li><code>left</code> 不允许左侧有浮动元素（清除左侧浮动的影响）</li>
<li><code>right</code>不允许右侧有浮动元素（清除右侧浮动的影响）</li>
<li><code>both</code> 清除左右两侧</li>
</ol>
<h4 id="3-1-清除浮动的方法"><a href="#3-1-清除浮动的方法" class="headerlink" title="3.1 清除浮动的方法"></a>3.1 清除浮动的方法</h4><ol>
<li><p>额外标签法也称为隔墙法,是W3C推荐的做法。</p>
<p>额外标签法会在浮动元素末尾添加一个空的标签。例如<code>&lt;div style=&quot;clear.both&quot; &gt; &lt;/div&gt;</code> ,或者其他标签(如<code>&lt;br/&gt;</code>等)。</p>
<ul>
<li>优点：通俗易懂,书泻方便</li>
<li>缺点：添加许多无意义的标签，结构化较差</li>
</ul>
<p><strong>所添加的元素必须是块级元素，不能是行内元素</strong></p>
</li>
<li><p>父级添加overflow属性</p>
<p>可以给父级添加<code>overflow</code>属性，将其属性值设置为<code>hidden</code>、<code>auto</code> 或<code>scroll</code>。<br>子不教父之过注意是给父元素添加代码。</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出的部分</li>
</ul>
</li>
<li><p>父级添加after伪元素</p>
</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    display: block;</span><br><span class="line">    height: 0;</span><br><span class="line">    clear: both;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>:after</code>方式是额外标签法的升级版，也是给父元素添加；</p>
<ol start="4">
<li><p>父级添加双伪元素</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.clearfix:before,</span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    content: "";</span><br><span class="line">    display: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix:after &#123;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.clearfix &#123;</span><br><span class="line">    *zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4、切图"><a href="#4、切图" class="headerlink" title="4、切图"></a>4、切图</h3><p>Cutterman PS切图插件<a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">下载地址</a></p>
<h3 id="5、CSS属性书写顺序"><a href="#5、CSS属性书写顺序" class="headerlink" title="5、CSS属性书写顺序"></a>5、CSS属性书写顺序</h3></li>
<li><p>布局定位属性: <code>display/ position/ float/ clear / visibility/ overflow</code>(建议<code>display</code>第一个写,毕竟关系到模式)</p>
</li>
<li><p>自身属性: <code>width/ height/ margin/ padding / border/ background</code></p>
</li>
<li><p>文本属性: <code>color/ font / text-decoration/ text align/ vertical-align/ white- space / break-word</code></p>
</li>
<li><p>其他属性(CSS3) : <code>content / cursor / border-radius/ box- shadow/ text- shadow/ backgroundlinear-gradient...</code></p>
<h3 id="6、页面布局的整体思路"><a href="#6、页面布局的整体思路" class="headerlink" title="6、页面布局的整体思路"></a>6、页面布局的整体思路</h3><p>为了提高网页制作的效率，布局时通常有以下的整体思路:</p>
</li>
<li><p>必须确定页面的版心(可视区) ，我们测量可得知。</p>
</li>
<li><p>分析页面中的行模块，以及每个行模块中的列模块。页面布局第一准则</p>
</li>
<li><p>一行中的列模块经常浮动布局先确定每个列的大小，之后确定列的位置。页面布局第二准则</p>
</li>
<li><p>制作HTML结构。我们还是遵循。先有结构，后有样式的原则。结构永远最为重要</p>
</li>
<li><p>先理清楚布局结构，再写代码尤为重要；</p>
<h3 id="7、定位"><a href="#7、定位" class="headerlink" title="7、定位"></a>7、定位</h3></li>
</ol>
<p><strong>CSS 定位 (Positioning) 属性允许你对元素进行定位。</strong></p>
<ol>
<li>浮动可以让多个块级盒子在一行没有缝随排列显示 ，经常用于横向排列盒子。</li>
<li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。<h4 id="7-1-定位的组成"><a href="#7-1-定位的组成" class="headerlink" title="7.1 定位的组成"></a>7.1 定位的组成</h4></li>
</ol>
<p><strong>定位 = 定位模式 + 边偏移</strong></p>
<p>定位模式用于指定一个元素在文档中的定位方式。</p>
<p>边偏移则决定了该元素的最终位置。</p>
<h5 id="7-1-1-定位模式"><a href="#7-1-1-定位模式" class="headerlink" title="7.1.1 定位模式"></a>7.1.1 定位模式</h5><p>定位模式决定元素的定位方式。它通过CSS的<code>position</code>属性来设置，其值可以分为四个：</p>
<ol>
<li><code>static</code> 静态定位</li>
<li><code>relative</code> 相对定位</li>
<li><code>absolute</code> 绝对定位</li>
<li><code>fixed</code> 固定定位</li>
</ol>
<h5 id="7-1-2-边偏移"><a href="#7-1-2-边偏移" class="headerlink" title="7.1.2 边偏移"></a>7.1.2 边偏移</h5><p>边偏移就是定位的盒子移动到最终位置。有<code>top</code>、<code>bottom</code>、<code>left</code>和<code>right</code>4个属性。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">top: 80px /*顶端偏移量，定义相对于其父元素上边线的距离*/</span><br></pre></td></tr></table></figure>
<h4 id="7-2-静态定位static"><a href="#7-2-静态定位static" class="headerlink" title="7.2 静态定位static"></a>7.2 静态定位static</h4><p>静态定位是元素的默认定位方式，无定位的意思；</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123;position: static;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>静态定位按照标准流特性摆放位置，它没有边偏移；</li>
<li>静态定位在布局时很少用到；</li>
</ul>
<h4 id="7-3-相对定位relative（重要）"><a href="#7-3-相对定位relative（重要）" class="headerlink" title="7.3 相对定位relative（重要）"></a>7.3 相对定位relative（重要）</h4><p>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的；<br>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123;position: relative;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>相对定位的特点: ( 务必记住)</strong></p>
<ol>
<li>它是相对于自己原来的位置来移动的(移动位置的时候参照点是自己原来的位置)。</li>
<li>原来在标准流的位置继续占有。后面的盒子仍然以标准流的方式对待它。(不脱标。继续保留原来位置)</li>
</ol>
<h4 id="7-4-绝对定位absolute（重要）"><a href="#7-4-绝对定位absolute（重要）" class="headerlink" title="7.4 绝对定位absolute（重要）"></a>7.4 绝对定位absolute（重要）</h4><p>绝对定位是元素在移动位置的时候,是相对于它祖先元素来说的。</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123;position: absolute;&#125;</span><br></pre></td></tr></table></figure>
<p><strong>绝对定位的特点: ( 务必记住)</strong></p>
<ol>
<li>如果没有祖先元素或者祖先元素没有定位,则以浏览器为准定位(Document文档)。</li>
<li>如果祖先元素有定位(相对、绝对、固定定位),则以最近一级的有定位祖先元素为参考点移动位置。</li>
</ol>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.yeye</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line">            background-color: gray;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.baba</span> &#123;</span></span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            background-color: yellow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            bottom: 20px;</span><br><span class="line">            right: 20px;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"yeye"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"baba"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730024202.png" alt><br>3. 绝对定位不再占有原先的位置。( 脱标)</p>
<p><strong>子绝父相</strong></p>
<ol>
<li>子级绝对定位，不会占有位置。可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</li>
<li>父盒子需要加定位限制子盒子在父盒子内显示。</li>
</ol>
<h4 id="7-5-固定定位fixed（重要）"><a href="#7-5-固定定位fixed（重要）" class="headerlink" title="7.5 固定定位fixed（重要）"></a>7.5 固定定位fixed（重要）</h4><p>固定定位是元素固定于浏览器可视区的位置。</p>
<p>主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p>
<p> 语法：<br> <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123;position: fixed;&#125;</span><br></pre></td></tr></table></figure><br><strong>固定定位的特点: (务必记住)</strong></p>
<ol>
<li>以浏览器的可视窗口为参照点移动元素。<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动</li>
</ul>
</li>
<li>固定定位不在占有原先的位置。</li>
</ol>
<p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p>
<p><strong>固定定位小技巧:固定在版心右侧位置。</strong></p>
<p><strong>小算法:</strong></p>
<ol>
<li>让固定定位的盒子<code>left:50%</code>，走到浏览器可视区(也可以看做版心)的一半位置。</li>
<li>让固定定位的盒子<code>margin-left：</code>，版心宽度的一半距离。多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对齐了。</li>
</ol>
<h4 id="7-6-粘性定位（了解）"><a href="#7-6-粘性定位（了解）" class="headerlink" title="7.6 粘性定位（了解）"></a>7.6 粘性定位（了解）</h4><p>粘性定位可以被认为是相对定位和固定定位的混合。Sticky 粘性的</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器 &#123;position: sticky; top: 10px&#125;</span><br></pre></td></tr></table></figure>
<p><strong>粘性定位的特点:</strong></p>
<ol>
<li>以浏览器的可视窗口为参照点移动元素(固定定位特点)</li>
<li>粘性定位占有原先的位置(相对定位特点)</li>
<li>必须添加<code>top</code>、<code>left</code>、<code>right</code>、<code>bottom</code>其中一个才有效</li>
</ol>
<h4 id="定位比较："><a href="#定位比较：" class="headerlink" title="定位比较："></a>定位比较：</h4><p><img src="http://qny.suixinya.top/HexoBlog/dingwei.png" alt="定位比较图"></p>
<h4 id="7-7-定位叠放次序-z-index"><a href="#7-7-定位叠放次序-z-index" class="headerlink" title="7.7 定位叠放次序 z-index"></a>7.7 定位叠放次序 z-index</h4><p>在使用定位布局时，可能会出现盒子重叠的情况。此时可以使用z-index来控制盒子的前后次序(z轴)</p>
<p>语法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选择器&#123; z-index: 1;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>数值可以是正整数、负整数或0,默认是auto。数值越大,盒子越靠上;</li>
<li>如果属性值相同,则按照书写顺序,后来居上;</li>
<li>数字后面不能加单位;</li>
<li>只有定位的盒子才有z-index属性;</li>
</ul>
<h4 id="7-8-定位的拓展"><a href="#7-8-定位的拓展" class="headerlink" title="7.8 定位的拓展"></a>7.8 定位的拓展</h4><h5 id="7-8-1-绝对定位盒子居中"><a href="#7-8-1-绝对定位盒子居中" class="headerlink" title="7.8.1 绝对定位盒子居中"></a>7.8.1 绝对定位盒子居中</h5><p>加了绝对定位的盒子不能通过<code>margin:0 auto</code>水平居中,但是可以通过以下计算方法实现水平和垂直居中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 50%;</span><br><span class="line">            margin-left: -100px;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            top: 50%;</span><br><span class="line">            margin-top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730025133.png" alt></p>
<h5 id="7-8-2-定位特殊特性"><a href="#7-8-2-定位特殊特性" class="headerlink" title="7.8.2 定位特殊特性"></a>7.8.2 定位特殊特性</h5><p>绝对定位和固定定位也和浮动类似。</p>
<ol>
<li>行内元素添加绝对或者固定定位，可以直接设置高度和宽度。</li>
<li>块级元素添加绝对或者固定定位，如果不给宽度或者高度。默认大小是内容的大小。</li>
</ol>
<h5 id="7-8-3-绝对定位-固定定位-会完全压住盒子"><a href="#7-8-3-绝对定位-固定定位-会完全压住盒子" class="headerlink" title="7.8.3 绝对定位(固定定位)会完全压住盒子"></a>7.8.3 绝对定位(固定定位)会完全压住盒子</h5><p>浮动元素不同，只会压住它下面标准流的盒子。但是不会压住下面标准流盒子里面的文字(图片)；</p>
<p>但是绝对定位(固定定位)会压住下面标准流所有的内容。</p>
<p>浮动之所以不会压住文字。因为浮动产生的目的最初是为了做文字环绕效果的。字会围绕浮动元素；</p>
<h3 id="8、布局总结"><a href="#8、布局总结" class="headerlink" title="8、布局总结"></a>8、布局总结</h3><p>通过盒子模型，清楚知道大部分html标签是一个盒子。</p>
<p>通过CSS浮动、定位可以让每个盒子排列成为网页。</p>
<p>一个完整的网页，是标准流、浮动、定位一起完成布局的，每个都有自己的专门用法。</p>
<ol>
<li><p>标准流</p>
<p>可以让盒子上下排列或者左右排列，垂直的块级盒子显示就用标准流布局。</p>
</li>
<li><p>浮动</p>
<p>可以让多个块级元素一行显示或者左右对齐盒子 ,多个块级盒子水平显示就用浮动布局。</p>
</li>
<li><p>定位</p>
<p>定位最大的特点是有层叠的概念，就是可以让多个盒子前后叠压来示。如果元素自由在某个盒子内移动就<br>用定位布局。</p>
</li>
</ol>
<h3 id="9、元素的显示与隐藏"><a href="#9、元素的显示与隐藏" class="headerlink" title="9、元素的显示与隐藏"></a>9、元素的显示与隐藏</h3><p>一个元素在页面中显示或者隐藏</p>
<ol>
<li><code>display</code> 显示隐藏</li>
<li><code>visibility</code> 显示隐藏</li>
<li><code>overflow</code> 显示隐藏</li>
</ol>
<h4 id="9-1-display显示隐藏"><a href="#9-1-display显示隐藏" class="headerlink" title="9.1 display显示隐藏"></a>9.1 display显示隐藏</h4><p><code>display</code>属性用于设置一个元素应如何显示。</p>
<ul>
<li><code>display:none</code> ; 隐藏对象</li>
<li><code>display:block</code>; 除了转换为块级元素之外,同时还有示元素的意思</li>
</ul>
<p><strong>display隐藏元素后,不再占有原来的位置。</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.suixin</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* display: block; */</span></span></span><br><span class="line">            display: none;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.ershisi</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"suixin"</span>&gt;</span>随心<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ershisi"</span>&gt;</span>贰拾肆<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730025435.png" alt></p>
<h4 id="9-2-visibility可见性"><a href="#9-2-visibility可见性" class="headerlink" title="9.2 visibility可见性"></a>9.2 visibility可见性</h4><p><code>visibility</code>属性用于指定一个元素应可见还是隐藏。</p>
<ul>
<li><code>visibility : visible</code>; 元素可见</li>
<li><code>visibility : hidden</code>; 元素隐藏<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.suixin</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/* visibility: visible; */</span></span></span><br><span class="line">            visibility: hidden;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.ershisi</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"suixin"</span>&gt;</span>随心<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ershisi"</span>&gt;</span>贰拾肆<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<img src="http://qny.suixinya.top/HexoBlog/20200730025611.png" alt></li>
</ul>
<p><code>visibility</code>隐藏元素后。继续占有原来的位置。</p>
<p>如果隐藏元素想要原来位置，就用<code>visibility : hidden</code></p>
<p>如果隐藏元素不想要原来位置，就用<code>display : none</code> (用处更多重点)</p>
<h4 id="9-3-overflow溢出"><a href="#9-3-overflow溢出" class="headerlink" title="9.3 overflow溢出"></a>9.3 overflow溢出</h4><p><code>overflow</code>属性指定了如果内容溢出一个元素的框(超过其指定高度及宽度)时，会发生什么。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* overfLow: visible; */</span><br><span class="line">/* overflow: hidden; */</span><br><span class="line">/* scroll 溢出的部分显示滚动条*/</span><br><span class="line">/* overfLow: scroll; */</span><br><span class="line">overflow: auto;</span><br></pre></td></tr></table></figure>
<p>综合案例：(遮罩效果)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 444px;</span><br><span class="line">            height: 320px;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">            display: none;</span><br><span class="line">            position: absolute;</span><br><span class="line">            top: 0;</span><br><span class="line">            left: 0;</span><br><span class="line">            width: 100%;</span><br><span class="line">            height: 100%;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.tudou</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.mask</span> &#123;</span></span><br><span class="line">            display: block;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tudou"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://qny.suixinya.top/HexoBlog/%E4%BF%AE%E5%8F%A4%E9%A3%8E.jpg"</span> <span class="attr">alt</span>=<span class="string">"修古风"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="http://qny.suixinya.top/HexoBlog/20200730030047.png" alt></p>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Cesium入门（一） 环境搭建</title>
    <url>/2020/08/09/Cesium%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<p>Cesium是一款开源的基于JavaScript的地图可视化的库，一款用于创建虚拟场景的3D地理信息平台。目标是用于创建以基于Web的地图动态数据可视化。支持2D,2.5D,3D 形式的地理（地图）数据展示，可以绘制各种几何图形、高亮区域，支持导入图片，甚至三维模型等多种数据可视化展示。</p>
</blockquote>
<a id="more"></a>

<h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>Node环境，<a href="http://nodejs.cn/" target="_blank" rel="noopener">Node官网下载地址</a></p>
<p>Cesium源码，<a href="https://cesium.com/" target="_blank" rel="noopener">官网下载地址</a>,也可以正在GitHub下载</p>
<h4 id="二、Node安装"><a href="#二、Node安装" class="headerlink" title="二、Node安装"></a>二、Node安装</h4><p>安装完成之后，输入<code>node -v</code>检查是否安装成功，国内使用npm速度很慢，可以使用cnpm，安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h4 id="三、下载好Cesium之后"><a href="#三、下载好Cesium之后" class="headerlink" title="三、下载好Cesium之后"></a>三、下载好Cesium之后</h4><p>解药cesium压缩包，打开命令行进入到cesium命令，输入<code>cnpm install</code>安装依赖。</p>
<p>输入<code>node server.cjs</code>本地启动cesium。默认使用8080端口（cesium不允许以本地file的方式打开，只允许在服务端运行，以域名的方式访问）。</p>
<p>启动之后可以在浏览器中输入<a href="http://localhost:8080进行查看。">http://localhost:8080进行查看。</a></p>
<h4 id="四、其他方式启动"><a href="#四、其他方式启动" class="headerlink" title="四、其他方式启动"></a>四、其他方式启动</h4><p>除了使用<code>node server.cjs</code>方式启动之外，还可以搭配Web服务器进行使用，例如：IIS、Nginx、Tomac，以nginx为例，其他服务器的配置也类似：</p>
<ol>
<li><p>下载nginx<a href="https://nginx.org/" target="_blank" rel="noopener">官网地址</a>，解压</p>
</li>
<li><p>打开nginx的配置文件nginx.conf,修改http块的server配置如下：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200809105816.png" alt></p>
</li>
<li><p>在nginx目录输入<code>start ./nginx.exe</code>启动nginx，在浏览器输入<code>http://localhost/</code>访问,如下：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200809110153.png" alt></p>
</li>
</ol>
<p>至此，cesium的环境就搭建完成了。</p>
]]></content>
      <categories>
        <category>Cesium系列</category>
      </categories>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2020/01/29/HTML%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<blockquote>
<p>HTML称为超文本标记语言，是一种标识性的语言。它包括一系列标签。通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。HTML文本是由HTML命令组成的描述性文本，HTML命令可以说明文字，图形、动画、声音、表格、链接等。超文本就是内容不仅仅是文本，包括了图片声音动画等内容（超越了文本的限制），可以从一个文件跳转到另一个文件，与世界各地的文本连接（超级链接文本）。下面是常用的HTML标签。</p>
</blockquote>
<a id="more"></a>

<h3 id="1、标题标签"><a href="#1、标题标签" class="headerlink" title="1、标题标签"></a>1、标题标签</h3><p>标题有6种，从<code>&lt;h1&gt;&lt;/h1&gt;</code>标签到<code>&lt;h6&gt;&lt;/h6&gt;</code>标签</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">.........</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>确保将 HTML heading 标签只用于标题。不要仅仅是为了产生粗体或大号的文本而使用标题。</p>
<h3 id="2、段落标签"><a href="#2、段落标签" class="headerlink" title="2、段落标签"></a>2、段落标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用空的段落标记<code>&lt;p&gt;&lt;/p&gt;</code>去插入一个空行是个坏习惯。用 <br> 标签代替它。</p>
<h3 id="3、换行标签"><a href="#3、换行标签" class="headerlink" title="3、换行标签"></a>3、换行标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>       单标签    语义：强制换行</span><br></pre></td></tr></table></figure>
<p>用于换行。</p>
<h3 id="4、文本格式化标签"><a href="#4、文本格式化标签" class="headerlink" title="4、文本格式化标签"></a>4、文本格式化标签</h3><p>标签语义：突出重要性，比普通文字更重要</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">string</span>&gt;</span>   <span class="comment">&lt;!-- 推荐使用，语义更加强烈 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">em</span>&gt;</span>  		  <span class="comment">&lt;!-- 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>倾斜<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>       <span class="comment">&lt;!-- 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">s</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;<span class="name">ins</span>&gt;</span>        <span class="comment">&lt;!-- 推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>推荐使用是因为语义更加突出。</p>
<h3 id="5、div和span标签"><a href="#5、div和span标签" class="headerlink" title="5、div和span标签"></a>5、div和span标签</h3><p>无语义，用来布局，用来装内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;独占一行&lt;&#x2F;div&gt;</span><br><span class="line">&lt;span&gt;跨行&lt;span&gt;</span><br></pre></td></tr></table></figure>
<h3 id="6、图像标签"><a href="#6、图像标签" class="headerlink" title="6、图像标签"></a>6、图像标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像url"</span> <span class="attr">alt</span>=<span class="string">"替换文本"</span> <span class="attr">title</span>=<span class="string">"提示文本"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">"400"</span> <span class="attr">height</span>= <span class="string">"200"</span>" <span class="attr">border</span>= <span class="string">"设定边框，单位是像素"</span> &gt;</span></span><br></pre></td></tr></table></figure>
<p>单标签，alt 属性是在图片资源出现问题加载不出来时的提示文本。</p>
<h3 id="7、链接标签"><a href="#7、链接标签" class="headerlink" title="7、链接标签"></a>7、链接标签</h3><p>url要以<code>htttp://</code>或者<code>https://</code>开头，内部链接的话使用html文件名，#代替空链接<br>下载链接：地址链接为.exe或者zip等压缩形式<br>网页元素的链接：图片、音频、视频等，放置在替换文本位置<br>target:打开窗口的方式默认为：_self</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"链接目标的url"</span> <span class="attr">target</span>= <span class="string">"_self或者_blank"</span>&gt;</span>代替文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建锚点链接：锚点链接的语法：<code>&lt;a name=&quot;锚点的名字&quot;&gt;&lt;/a&gt;</code>意思是在网页中的某一个位置，插入一个锚点<code>&lt;a href=&quot;#锚点的名字&quot;&gt;显示的字样&lt;/a&gt;</code>只要点击该链接，就会自动跳转到锚点处。在<code>&lt;a&gt;</code>标签的href属性中，设置属性值为：#名字 的形式，如:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#two"</span>&gt;</span>第二季<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>就可以实现锚点链接，使用id时不需要加<code>#</code>。</p>
<h3 id="8、注释和特殊字符"><a href="#8、注释和特殊字符" class="headerlink" title="8、注释和特殊字符"></a>8、注释和特殊字符</h3><p>注释：（VSCode中快捷键  Ctrl + /）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注释--&gt;</span></span><br></pre></td></tr></table></figure>
<p>特殊字符：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="symbol">&amp;nbsp;</span>  <span class="comment">&lt;!-- 空格 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;lt;</span>    <span class="comment">&lt;!-- &lt;号 --&gt;</span></span><br><span class="line"><span class="symbol">&amp;gt;</span>    <span class="comment">&lt;!-- &gt;号 --&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="9、表格标签-lt-table-gt-lt-table-gt"><a href="#9、表格标签-lt-table-gt-lt-table-gt" class="headerlink" title="9、表格标签&lt;table&gt;&lt;/table&gt;"></a>9、表格标签<code>&lt;table&gt;&lt;/table&gt;</code></h3><p>表格由<code>&lt;table&gt;</code>标签来定义。每个表格均有若干行（由 <code>&lt;tr&gt;</code>标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code>标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>
<h4 id="9-1表格"><a href="#9-1表格" class="headerlink" title="9.1表格"></a>9.1表格</h4><p>表格用来存放数据；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span> <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  <span class="comment">&lt;!-- 行，在&lt;table&gt; &lt;/table&gt;标签中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span>  <span class="comment">&lt;!-- 单元格，在&lt;tr&gt;&lt;/tr&gt;标签中 --&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：没有列的概念，有几个单元格写几个<code>&lt;td&gt;&lt;/td&gt;</code>标签</p>
<h4 id="9-2表头单元格"><a href="#9-2表头单元格" class="headerlink" title="9.2表头单元格"></a>9.2表头单元格</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>标签中的文字会居中加粗;</p>
<h4 id="9-3表格的属性（不常用，通过css来设置）"><a href="#9-3表格的属性（不常用，通过css来设置）" class="headerlink" title="9.3表格的属性（不常用，通过css来设置）"></a>9.3表格的属性（不常用，通过css来设置）</h4><p>写在<code>&lt;table&gt;</code>标签中</p>
<ul>
<li><p>对齐方式：<code>align</code>   值：<code>center    left    right</code></p>
</li>
<li><p><code>border</code>：边框 ,如果不定义边框属性，表格将不显示边框。但是大多数时候，我们希望显示边框。</p>
<p>使用边框属性来显示一个带有边框的表格：<code>border=&quot;1&quot;</code></p>
</li>
<li><p><code>cellpadding</code>： 内容与单元格边框间的距离；单元格内容与其边框之间的空白。</p>
</li>
<li><p><code>cellspacing</code> ：单元格之间的距离，默认为2；</p>
</li>
<li><p><code>width</code> ：表格宽度</p>
</li>
<li><p><code>height</code> ：表格高度</p>
</li>
</ul>
<h4 id="9-4表格结构标签"><a href="#9-4表格结构标签" class="headerlink" title="9.4表格结构标签"></a>9.4表格结构标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>注意：<code>&lt;th&gt;</code>是表头单元格，<code>&lt;thead&gt;</code>是表头区域;</p>
<h4 id="9-5合并单元格"><a href="#9-5合并单元格" class="headerlink" title="9.5合并单元格"></a>9.5合并单元格</h4><p>跨行合并：<code>rowspan=&quot;合并单元格的个数&quot;</code></p>
<p>跨列合并：<code>clospan=&quot;合并单元格的个数&quot;</code></p>
<p>语法格式：在目标单元格写合并代码</p>
<p>目标单元格：</p>
<ul>
<li>跨行：最上侧单元格为目标单元格；</li>
<li>跨行：最左侧单元格为目标单元格;</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot; cellspacing &#x3D; &quot;0&quot; cellpadding &#x3D; &quot;0&quot; width &#x3D; &quot;400&quot; height &#x3D; &quot;200&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td colspan&#x3D;&quot;3&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;!-- &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt; --&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<p>注意：合并了之后还需要删除多余的单元格，注意确定是跨行还是跨列合并。</p>
<h3 id="10、列表"><a href="#10、列表" class="headerlink" title="10、列表"></a>10、列表</h3><p>列表主要用来布局，HTML 支持有序、无序和定义列表；</p>
<h4 id="10-1无序列表-重点"><a href="#10-1无序列表-重点" class="headerlink" title="10.1无序列表(重点)"></a>10.1无序列表(重点)</h4><p>无序列表是一个项目的列表，此列项目使用粗体圆点（典型的小黑圆圈）进行标记。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;香蕉&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<h4 id="10-2有序列表"><a href="#10-2有序列表" class="headerlink" title="10.2有序列表"></a>10.2有序列表</h4><p>有序列表也是一列项目，列表项目使用数字进行标记。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;苹果&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;香蕉&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;橘子&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<h4 id="10-3自定义列表（重点）"><a href="#10-3自定义列表（重点）" class="headerlink" title="10.3自定义列表（重点）"></a>10.3自定义列表（重点）</h4><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。自定义列表以<code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词2<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词2解释3<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>显示效果如下：</p>
<p>名词1</p>
<p>​        名词1解释1</p>
<p>​        名词1解释2</p>
<p>​        名词1解释3</p>
<p>名词2</p>
<p>​        名词2解释1</p>
<p>​        名词2解释2</p>
<p>​        名词2解释3</p>
<h3 id="11、表单"><a href="#11、表单" class="headerlink" title="11、表单"></a>11、表单</h3><p>HTML 表单用于搜集不同类型的用户输入。</p>
<p>表单：表单域、表单控件、提示信息</p>
<h4 id="11-1表单域"><a href="#11-1表单域" class="headerlink" title="11.1表单域"></a>11.1表单域</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址，处理表单数据的服务器程序地址"</span></span></span><br><span class="line"><span class="tag"><span class="attr">method</span>=<span class="string">"POST/GET"</span> <span class="attr">name</span>=<span class="string">"名称指定表单名称"</span></span></span><br><span class="line"><span class="tag">&gt;</span>各种各样的控件<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="11-2表单控件"><a href="#11-2表单控件" class="headerlink" title="11.2表单控件"></a>11.2表单控件</h4><p>表单控件指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p>
<h5 id="11-2-1-input输入表单元素"><a href="#11-2-1-input输入表单元素" class="headerlink" title="11.2.1 input输入表单元素"></a>11.2.1 input输入表单元素</h5><p>input是单标签<code>&lt;input type =&quot;属性值&quot; /&gt;</code>type值有很多，例如：<code>submit</code>、<code>text</code>、<code>radio</code>、<code>reset</code>、<code>button</code>、<code>file</code>等；可以参考<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">W3School</a>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span>"&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    性别：男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span> 女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    爱好：吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 睡觉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> 玩游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单选按钮和复选按钮可以设置ckecked属性，设置为默认值 --&gt;</span></span><br><span class="line">性别：男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span> 女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">checked</span>=<span class="string">"ckecked"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="11-2-2-select下拉表单元素"><a href="#11-2-2-select下拉表单元素" class="headerlink" title="11.2.2 select下拉表单元素"></a>11.2.2 select下拉表单元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">籍贯：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="11-2-3-textarea文本域表单元素"><a href="#11-2-3-textarea文本域表单元素" class="headerlink" title="11.2.3 textarea文本域表单元素"></a>11.2.3 textarea文本域表单元素</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span>文本域<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="12、lable标签"><a href="#12、lable标签" class="headerlink" title="12、lable标签"></a>12、lable标签</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">性别：<span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nan"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"nan"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nv"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">id</span>=<span class="string">"nv"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>拥有两个带有标签的单选按钮的表单,for 属性规定 label 与哪个表单元素绑定。</p>
<blockquote>
<p>PS：以上为比较常用的标签，更加详细的内容请参考<a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">W3School</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2020/01/21/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。这是官网对Hexo的定义，熟悉Hexo的常用命令可以帮助我们更好的管理我们的博客。下面这几个是普通用户经常使用的命令。</p>
</blockquote>
 <a id="more"></a>

<h3 id="1、hexo-init"><a href="#1、hexo-init" class="headerlink" title="1、hexo init"></a>1、hexo init</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>
<p>初始化本地文件夹为网站的根目录,如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p>
<h3 id="2、hexo-new-一般简写为hexo-n"><a href="#2、hexo-new-一般简写为hexo-n" class="headerlink" title="2、hexo new  一般简写为hexo n"></a>2、hexo new  一般简写为<code>hexo n</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>
<p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。例如：<code>hexo n &quot;my first post&quot;</code>。</p>
<h3 id="3、hexo-generate-一般简写为：hexo-g"><a href="#3、hexo-generate-一般简写为：hexo-g" class="headerlink" title="3、hexo generate 一般简写为：hexo g"></a>3、hexo generate 一般简写为：<code>hexo g</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>该命令用于生成静态文件。生成的静态文件默认目录为：public文件夹</p>
<h3 id="4、hexo-server-一般简写为hexo-s"><a href="#4、hexo-server-一般简写为hexo-s" class="headerlink" title="4、hexo server 一般简写为hexo s"></a>4、hexo server 一般简写为<code>hexo s</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>启动本地服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<ul>
<li><code>-p</code>  选项，指定本地服务器运行端口，默认是启动4000端口，如果需要使用其他端口则使用<code>-p</code>选项，例如：以99端口启动则使用：<code>hexo s -p 99</code></li>
</ul>
<h3 id="5、hexo-deploy-一般简写为：hexo-d"><a href="#5、hexo-deploy-一般简写为：hexo-d" class="headerlink" title="5、hexo deploy 一般简写为：hexo d"></a>5、hexo deploy 一般简写为：<code>hexo d</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<blockquote>
<p>使用该命令前需要修改站点的_config.yml配置文件，如果使用git，还需要使用<code>npm install --save hexo-deployer-git</code> 安装git部署插件。配置详情如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">	type: git</span><br><span class="line">	repo: git仓库的地址</span><br><span class="line">	branch:	master</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="6、hexo-clean"><a href="#6、hexo-clean" class="headerlink" title="6、hexo clean"></a>6、hexo clean</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<p>清理缓存文件，包括db.json和已经生成的静态文件public。在网站显示异常时可以使用该命令。</p>
<blockquote>
<p>以上这些为我们普通用户经常需要用到的命令及相关的选项，如果想了了解更多可以前往<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">hexo官网的指令文档</a>查看。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Nginx详解</title>
    <url>/2020/07/24/Nginx%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>Nginx (“Engine x”) 是一个高性能的 HTTP 和反向代理服务器，特点是占有内存少，并发能力强，nginx可以作为一个HTTP服务器进行网站的发布处理，另外nginx可以作为反向代理进行负载均衡的实现。中国大陆使用nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p>
<p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php 等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发， 性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,</p>
</blockquote>
<a id="more"></a>

<h2 id="1、nginx简介"><a href="#1、nginx简介" class="headerlink" title="1、nginx简介"></a>1、nginx简介</h2><h3 id="1-1-反向代理"><a href="#1-1-反向代理" class="headerlink" title="1.1 反向代理"></a>1.1 反向代理</h3><ol>
<li><p>正向代理</p>
<p>如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。在客户端（浏览器）中配置代理服务器，通过代理服务器进行互联网访问。正向代理最大的特点是客户端非常明确要访问的服务器地址；服务器只清楚请求来自哪个代理服务器，而不清楚来自哪个具体的客户端；正向代理模式屏蔽或者隐藏了真实客户端信息。</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730113255.png" alt="正向代理工作流程"></p>
</li>
<li><p>反向代理</p>
</li>
</ol>
<p>客户端对代理是无感知的，不需要配置服务器，只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据之后返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器的地址，隐藏了真实服务器的ip地址。</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730114512.png" alt></p>
<h3 id="1-2-负载均衡"><a href="#1-2-负载均衡" class="headerlink" title="1.2 负载均衡"></a>1.2 负载均衡</h3><p>​        客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。这种架构模式对于早期的系统相对单一，并发请求相对较少的情况下是比较适合的，成 本也低。但是随着信息数量的不断增长，访问量和数据量的飞速增长，以及系统业务的复杂 度增加，这种架构会造成服务器相应客户端的请求日益缓慢，并发量特别大的时候，还容易 造成服务器直接崩溃。</p>
<p>​        我们首先想到的可能是升级服务器的配置，比如提高 CPU 执行频率，加大内存等提高机 器的物理性能来解决此问题，但是我们知道摩尔定律的日益失效，硬件的性能提升已经不能 满足日益提升的需求了。例如：天猫双十一当天，某个热销商品的瞬时访问量 是极其庞大的，那么类似上面的系统架构，将机器都增加到现有的顶级物理配置，都是不能 够满足需求的。那么怎么办呢？ </p>
<p>​         上面的分析我们去掉了增加服务器物理配置来解决问题的办法，也就是说纵向解决问题 的办法行不通了，那么横向增加服务器的数量呢？这时候集群的概念产生了，单个服务器解决不了，我们增加服务器的数量，将请求发送到各个服务器上，将原来请求集中到单个服务器上的情况改为分发到多个服务器上，将负载分发到不同的服务器，这就是负载均衡。</p>
<ol>
<li>weight轮询（默认）：接收到的请求按照顺序逐一分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。 这种方式下，可以给不同的后端服务器设置一个权重值（weight），用于调整不同的服务器上请求的分配率；权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li>ip_hash：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li>fair：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块</li>
<li>url_hash：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包</li>
</ol>
<h3 id="1-3-动静分离"><a href="#1-3-动静分离" class="headerlink" title="1.3 动静分离"></a>1.3 动静分离</h3><p>将静态资源（html、css、js）和动态资源（asp、jsp、servlet）分开部署；</p>
<p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加块解析速度，降低原来单个服务器的压力。</p>
<p>可以理解为nginx处理静态页面，tomcat处理动态页面；</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730120359.png" alt></p>
<h2 id="2、nginx的安装、常用命令和配置文件"><a href="#2、nginx的安装、常用命令和配置文件" class="headerlink" title="2、nginx的安装、常用命令和配置文件"></a>2、nginx的安装、常用命令和配置文件</h2><p>可以在<a href="http://nginx.org/" target="_blank" rel="noopener">Nginx官网</a>下载</p>
<h3 id="2-1-在linux中安装"><a href="#2-1-在linux中安装" class="headerlink" title="2.1 在linux中安装"></a>2.1 在linux中安装</h3><p>linux的远程连接软件：putty、xshell、finalshell等等</p>
<p>使用win连接可以使用cmd、git、powershell等等，具体命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh 用户名@IP地址</span><br><span class="line">例如：</span><br><span class="line">ssh root@192.168.1.231</span><br></pre></td></tr></table></figure>
<ol>
<li>解压压缩包</li>
<li>进入解压目录执行./configure</li>
<li>编译并安装 make&amp;&amp;make install</li>
</ol>
<p><strong>通过yum安装：</strong></p>
<ol>
<li><p>添加Nginx到YUM源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure></li>
<li><p>安装nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install -y nginx</span><br></pre></td></tr></table></figure></li>
<li><p>安装之后的路径，可以使用<code>whereis nginx</code>命令进行查看<br> 以下是Nginx的默认路径：</p>
<p>(1) Nginx配置路径：/etc/nginx/</p>
<p>(2) PID目录：/var/run/nginx.pid</p>
<p>(3) 错误日志：/var/log/nginx/error.log</p>
<p>(4) 访问日志：/var/log/nginx/access.log</p>
<p>(5) 默认站点目录：/usr/share/nginx/html</p>
</li>
<li><p>启动，进入usr/sbin,执行如下命令：</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx</span><br></pre></td></tr></table></figure>
<p>使用 <code>ps -ef | grep nginx</code>查看是否在运行<br>5. 查看开放的端口号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall -cmd --list-all</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>设置开放的端口号：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-service=http -permanent</span><br><span class="line">sudo firewall-cmd --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></li>
<li>重启防火墙<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
这样就可以成功访问了。<h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl  start  nginx</span><br><span class="line"></span><br><span class="line">systemctl  restart  nginx</span><br><span class="line"></span><br><span class="line">systemctl  stop  nginx</span><br></pre></td></tr></table></figure>

<p><strong>nginx -s reload #重新加载Nginx配置文件，然后以优雅的方式重启Nginx</strong></p>
<p>nginx -s reopen #重启Nginx</p>
<p>nginx -s stop #强制停止Nginx服务</p>
<p>nginx -s quit #优雅地停止Nginx服务（即处理完所有请求后再停止服务）</p>
<p>nginx -t #检测配置文件是否有语法错误，然后退出</p>
<p>nginx -?,-h #打开帮助信息</p>
<p>nginx -v #显示版本信息并退出</p>
<p>nginx -V #显示版本和配置选项信息，然后退出</p>
<p>nginx -t #检测配置文件是否有语法错误，然后退出</p>
<p>nginx -T #检测配置文件是否有语法错误，转储并退出</p>
<p>nginx -q #在检测配置文件期间屏蔽非错误信息</p>
<p>nginx -p prefix #设置前缀路径(默认是:/usr/share/nginx/)</p>
<p>nginx -c filename #设置配置文件(默认是:/etc/nginx/nginx.conf)</p>
<p>nginx -g directives #设置配置文件外的全局指令</p>
<p>killall nginx #杀死所有nginx进程</p>
<blockquote>
<p>使用命令时，需要进入到nginx中的sbin目录中</p>
</blockquote>
<p><strong>卸载：<code>yum  remove  nginx</code></strong></p>
<h3 id="2-3-配置文件"><a href="#2-3-配置文件" class="headerlink" title="2.3 配置文件"></a>2.3 配置文件</h3><p>在本文末有详细的配置文件介绍。nginx配置文件有三部分组成，在目录为etc/nginx中：nginx.conf里面有全局块和events及http块，在conf.d/default.conf中有server；</p>
<h5 id="第一部分-全局块"><a href="#第一部分-全局块" class="headerlink" title="第一部分 全局块"></a>第一部分 全局块</h5><p>从配置文件开始到events块之间的内容，主要会设置影响nginx服务器整体运行的配置指令，例如：<br><code>worker_processes 1;</code> worker prosses的值越大，可以支持的并发处理量越多；</p>
<h5 id="第二部分-events块"><a href="#第二部分-events块" class="headerlink" title="第二部分 events块"></a>第二部分 events块</h5><p>events块涉及的指令主要影响nginx服务器与用户的网络连接，例如：<br><code>worker_connections 1024;</code>表示每个work process支持的最大连接数为1024；</p>
<h5 id="第三部分-http块"><a href="#第三部分-http块" class="headerlink" title="第三部分 http块"></a>第三部分 http块</h5><p> 这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。 需要注意的是：http 块也可以包括 http全局块、server 块。 </p>
<ol>
<li><p>http全局块</p>
<p> http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。 </p>
</li>
<li><p>server块</p>
<p>这块和虚拟主机有密切关系，虚拟主机从用户角度看，和一台独立的硬件主机是完全一样的，该技术的产生是为了 节省互联网服务器硬件成本。 每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机。 而每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块。 </p>
</li>
</ol>
<h6 id="1、全局server块"><a href="#1、全局server块" class="headerlink" title="1、全局server块"></a>1、全局server块</h6><p> 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置。 </p>
<h6 id="2、location块"><a href="#2、location块" class="headerlink" title="2、location块"></a>2、location块</h6><p> 一个 server 块可以配置多个 location 块。 </p>
<p>这块的主要作用是基于 Nginx  服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称 （也可以是IP 别名）之外的字符串（例如前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。 </p>
<ol>
<li>= ：用于不含正则表达式的 uri 前，要求请求字符串与 uri 严格匹配，如果匹配 成功，就停止继续向下搜索并立即处理该请求。 </li>
<li>~：用于表示 uri 包含正则表达式，并且区分大小写。 </li>
<li>~*：用于表示 uri 包含正则表达式，并且不区分大小写。 </li>
<li>^~：用于不含正则表达式的 uri 前，要求 Nginx 服务器找到标识 uri 和请求字 符串匹配度最高的 location 后，立即使用此 location 处理请求，而不再使用 location 块中的正则 uri 和请求字符串做匹配。 <blockquote>
<p>注意：如果 uri 包含正则表达式，则必须要有 ~ 或者 ~* 标识。 </p>
</blockquote>
</li>
</ol>
<h2 id="3、nginx配置实例"><a href="#3、nginx配置实例" class="headerlink" title="3、nginx配置实例"></a>3、nginx配置实例</h2><h3 id="3-1-反向代理"><a href="#3-1-反向代理" class="headerlink" title="3.1 反向代理"></a>3.1 反向代理</h3><h4 id="1、实现的效果"><a href="#1、实现的效果" class="headerlink" title="1、实现的效果"></a>1、实现的效果</h4><p>打开浏览器，在浏览器中地址栏中输入一个域名，例如：<a href="http://www.123.com,跳转Linux系统的tomcat主页面中" target="_blank" rel="noopener">www.123.com,跳转Linux系统的tomcat主页面中</a></p>
<h4 id="2、准备工作"><a href="#2、准备工作" class="headerlink" title="2、准备工作"></a>2、准备工作</h4><ol>
<li><p>安装tomcat，使用默认的8080端口：下载tomcat的压缩包，使用<code>tar -xvf 压缩包名</code>解压，进入到tomcat/bin目录中运行tomcat<code>./startup.sh</code></p>
<blockquote>
<p> <strong>如果提示权限不够进行提权操作：<code>chmod u+x *.sh</code></strong></p>
</blockquote>
</li>
<li><p>tomcat是依赖Java需要有java的环境，如果没有Java环境最简单的可以使用yum命令进行安装：<code>yum install -y java</code>,安装之后可以使用<code>java -version</code>进行查看java的版本；</p>
</li>
<li><p>对外开放tomcat的8080端口：<code>firewall-cmd --add-port=8080/tcp --permanent</code></p>
</li>
</ol>
<h4 id="3、访问的过程分析"><a href="#3、访问的过程分析" class="headerlink" title="3、访问的过程分析"></a>3、访问的过程分析</h4><p>windows的host文件（”C:\Windows\System32\drivers\etc\hosts”）进行配置域名映射ip地址（计算机在解析浏览器中的域名时先在本机的host配置中进行查找是否有对应的域名，如果有则不再往下找，如果本机中没有则在网上的DNS域名解析中查找）</p>
<h4 id="4、具体配置"><a href="#4、具体配置" class="headerlink" title="4、具体配置"></a>4、具体配置</h4><ol>
<li><p>在Windows中修改host配置文件中添加域名，host的文件路径为：<code>&quot;C:\Windows\System32\drivers\etc\hosts&quot;</code></p>
<p>添加记录<code>192.168.1.231 www.123.com</code></p>
</li>
<li><p>在nginx中进行请求转发（反向代理）配置</p>
<pre><code>location / {
    root   html;
    proxy pass http://127.0.0.1:8080;
    index  index.html index.htm;
               autoindex on;
}</code></pre></li>
<li><p>运行测试结果</p>
</li>
</ol>
<h3 id="3-2-负载均衡"><a href="#3-2-负载均衡" class="headerlink" title="3.2 负载均衡"></a>3.2 负载均衡</h3><h4 id="1、实现的效果-1"><a href="#1、实现的效果-1" class="headerlink" title="1、实现的效果"></a>1、实现的效果</h4><p>通过浏览器的地址栏输入<code>http://198.168.1.231/ed/a.html</code>,实现负载均衡的效果，请求时平均分担到8080和8081端口中；</p>
<h4 id="2、准备工作-1"><a href="#2、准备工作-1" class="headerlink" title="2、准备工作"></a>2、准备工作</h4><ol>
<li><p>准备两台tomcat服务器，一台8080，一台8081；</p>
</li>
<li><p>在两台tomcat里面<code>webapps</code>目录中创建名称为<code>edu</code>的文件夹，在<code>edu</code>文件夹中创建<code>a.html</code>页面，用于测试</p>
</li>
</ol>
<h4 id="3、在nginx的配置文件中进行负载均衡的配置"><a href="#3、在nginx的配置文件中进行负载均衡的配置" class="headerlink" title="3、在nginx的配置文件中进行负载均衡的配置"></a>3、在nginx的配置文件中进行负载均衡的配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在http块中添加负载均衡的服务列表</span><br><span class="line">upstream myserver &#123;</span><br><span class="line">server 192.168.1.231:8080;</span><br><span class="line">server 192.168.1.231:8081;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#在server中修改如下server和location：</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.1.231;</span><br><span class="line"></span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;myserver</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">	    autoindex on;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>   <code>http://myserver</code> 这个和你在http块中添加的负载均衡列表的名字是对应的；</p>
<h4 id="4、nginx分配服务器策略"><a href="#4、nginx分配服务器策略" class="headerlink" title="4、nginx分配服务器策略"></a>4、nginx分配服务器策略</h4><ol>
<li><p>轮询（默认）</p>
<p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</p>
</li>
<li><p>weight</p>
<p>weight代表权，默认为1，权重越高被分配的客户端越多，weight和被访问的几率成正比（用于后端服务器性能不均一的情况）,具体写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">   server 192.168.1.231:8080 weight&#x3D;5;</span><br><span class="line">   server 192.168.1.231:8081 weight&#x3D;10;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="3">
<li><p>ip_hash</p>
<p>每个请求按访问的ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">ip_hsah;</span><br><span class="line">server 192.168.1.231:8080;</span><br><span class="line">server 192.168.1.231:8081;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fair(第三方)</p>
<p>按照后端服务器的响应时间来进行分配，响应时间短的则优先分配，写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">server 192.168.1.231:8080;</span><br><span class="line">server 192.168.1.231:8081;</span><br><span class="line">fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="3-3-动静分离"><a href="#3-3-动静分离" class="headerlink" title="3.3 动静分离"></a>3.3 动静分离</h3><p>通过location指定不同的后缀名实现不同的请求转发。通过expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体Expires 定义:是给一个资源设定一个过期时间，也就是说无需去服务端验证,直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。( 如果经常更新的文件，不建议使用Expires 来缓存)，我这里设置3d,表示在这3天之内访问这个URL,发送一个请求， 比对服务器该文件最后更新时间没有变化， 则不会从服务器抓取， 返回状态码304，如果有修改，则直接从服务器重新下载，返回状态码200。</p>
<h4 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h4><p>在Linux中准备静态资源（html和jpg文件）用于测试；</p>
<p>/data/www/a.html</p>
<p>/data/image/a.jpg</p>
<h4 id="2、具体配置"><a href="#2、具体配置" class="headerlink" title="2、具体配置"></a>2、具体配置</h4>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location &#x2F;www&#x2F; &#123;</span><br><span class="line">root &#x2F;data&#x2F;;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">location &#x2F;image&#x2F; &#123;</span><br><span class="line">root &#x2F;data&#x2F;;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启nginx<code>nginx -s reload</code></p>
<h4 id="3、最终测试"><a href="#3、最终测试" class="headerlink" title="3、最终测试"></a>3、最终测试</h4><p>192.168.1.231/www/a.html</p>
<p>192.168.1.231/image/a.jpg</p>
<h3 id="3-4-nginx配置高可用集群"><a href="#3-4-nginx配置高可用集群" class="headerlink" title="3.4 nginx配置高可用集群"></a>3.4 nginx配置高可用集群</h3><p>当nginx宕机了，我们的请求就无法实现我们想要的结果，这时候我们就要配置成高可用，即使出现了nginx宕机的情况也能正常请求返回；</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200730124233.png" alt></p>
<p>需要两台nginx、keepalived、虚拟IP</p>
<h4 id="1、-配置高可用的准备环境"><a href="#1、-配置高可用的准备环境" class="headerlink" title="1、 配置高可用的准备环境"></a>1、 配置高可用的准备环境</h4><ol>
<li><p>需要两台服务器</p>
</li>
<li><p>在两台服务器中nginx和keepalived</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y keepalived</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在安装完之后会在etc生成keepalived目录，里面有keepalived.conf</li>
</ol>
<h4 id="2、完成高可用配置（主从配置）"><a href="#2、完成高可用配置（主从配置）" class="headerlink" title="2、完成高可用配置（主从配置）"></a>2、完成高可用配置（主从配置）</h4><p>略</p>
<h2 id="4、nginx原理"><a href="#4、nginx原理" class="headerlink" title="4、nginx原理"></a>4、nginx原理</h2><p>master&amp;worker</p>
<ol>
<li><p>启动nginx之后有两个进程：master和worker（worker可以有多个），master负责：管理和监控</p>
</li>
<li><p>worker如何进行工作，通过争抢方式抢夺master分发的客户端请求；</p>
</li>
<li><p>一个master多个worker的好处</p>
<ul>
<li>可以使用nginx -s reload 进行热部署，利于nginx进行热部署方式；</li>
<li>每一个worker是独立的进程，如果有一个出现了问题，其他worker是独立的，继续进行争抢，实现请求过程，不会造成服务终断</li>
</ul>
</li>
<li><p>设置多少个worker才是合适的？</p>
<p>nginx和redis类似都采用了io多路复用机制，每一个worker都是一个独立进程，但是每个进程里只有一个主进程，通过异步非阻塞方式来进行处理请求，即使是成千上万个请求也不在话下。每个worker线程可以把一个cpu的性能发挥极致，worker数和服务器的cpu数相等是最为合适的，四核4个worker，八核8个worker。设少了会浪费，设多了频繁切换会浪费。</p>
</li>
<li><p>连接数 worker connection</p>
<ul>
<li>发送一个请求，占用了worker的几个连接数？（2个或者4个）</li>
<li>nginx有一个master，四个worker，每个worker支持的最大连接数为1024，支持的最大并发数是多少？（答案：普通的静态访问最大并发数：4*1024 / 2 而如果是http作为方向代理来说，最大并发数为： 4* 1024 / 4 ）</li>
</ul>
</li>
</ol>
<h2 id="5完整配置文件详解"><a href="#5完整配置文件详解" class="headerlink" title="5完整配置文件详解"></a>5完整配置文件详解</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">######Nginx配置文件nginx.conf中文详解#####</span><br><span class="line"></span><br><span class="line">#定义Nginx运行的用户和用户组</span><br><span class="line">user www www;</span><br><span class="line"></span><br><span class="line">#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">worker_processes 8;</span><br><span class="line"> </span><br><span class="line">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">error_log &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;error.log info;</span><br><span class="line"></span><br><span class="line">#进程pid文件</span><br><span class="line">pid &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定进程可以打开的最大描述符：数目</span><br><span class="line">#工作模式与连接数上限</span><br><span class="line">#这个指令是指当一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（ulimit -n）与nginx进程数相除，但是nginx分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。</span><br><span class="line">#现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。</span><br><span class="line">#这是因为nginx调度时分配请求到进程并不是那么的均衡，所以假如填写10240，总并发量达到3-4万时就有进程可能超过10240了，这时会返回502错误。</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">    #参考事件模型，use [ kqueue | rtsig | epoll | &#x2F;dev&#x2F;poll | select | poll ]; epoll模型</span><br><span class="line">    #是Linux 2.6以上版本内核中的高性能网络I&#x2F;O模型，linux建议epoll，如果跑在FreeBSD上面，就用kqueue模型。</span><br><span class="line">    #补充说明：</span><br><span class="line">    #与apache相类，nginx针对不同的操作系统，有不同的事件模型</span><br><span class="line">    #A）标准事件模型</span><br><span class="line">    #Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll</span><br><span class="line">    #B）高效事件模型</span><br><span class="line">    #Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。</span><br><span class="line">    #Epoll：使用于Linux内核2.6版本及以后的系统。</span><br><span class="line">    #&#x2F;dev&#x2F;poll：使用于Solaris 7 11&#x2F;99+，HP&#x2F;UX 11.22+ (eventport)，IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。</span><br><span class="line">    #Eventport：使用于Solaris 10。 为了防止出现内核崩溃的问题， 有必要安装安全补丁。</span><br><span class="line">    use epoll;</span><br><span class="line"></span><br><span class="line">    #单个进程最大连接数（最大连接数&#x3D;连接数*进程数）</span><br><span class="line">    #根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行。每个进程允许的最多连接数，理论上每台nginx服务器的最大连接数为。</span><br><span class="line">    worker_connections 65535;</span><br><span class="line"></span><br><span class="line">    #keepalive超时时间。</span><br><span class="line">    keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。</span><br><span class="line">    #分页大小可以用命令getconf PAGESIZE 取得。</span><br><span class="line">    #[root@web001 ~]# getconf PAGESIZE</span><br><span class="line">    #4096</span><br><span class="line">    #但也有client_header_buffer_size超过4k的情况，但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。</span><br><span class="line">    client_header_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">    #这个将为打开文件指定缓存，默认是没有启用的，max指定缓存数量，建议和打开文件数一致，inactive是指经过多长时间文件没被请求后删除缓存。</span><br><span class="line">    open_file_cache max&#x3D;65535 inactive&#x3D;60s;</span><br><span class="line"></span><br><span class="line">    #这个是指多长时间检查一次缓存的有效信息。</span><br><span class="line">    #语法:open_file_cache_valid time 默认值:open_file_cache_valid 60 使用字段:http, server, location 这个指令指定了何时需要检查open_file_cache中缓存项目的有效信息.</span><br><span class="line">    open_file_cache_valid 80s;</span><br><span class="line"></span><br><span class="line">    #open_file_cache指令中的inactive参数时间内文件的最少使用次数，如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个文件在inactive时间内一次没被使用，它将被移除。</span><br><span class="line">    #语法:open_file_cache_min_uses number 默认值:open_file_cache_min_uses 1 使用字段:http, server, location  这个指令指定了在open_file_cache指令无效的参数中一定的时间范围内可以使用的最小文件数,如果使用更大的值,文件描述符在cache中总是打开状态.</span><br><span class="line">    open_file_cache_min_uses 1;</span><br><span class="line">    </span><br><span class="line">    #语法:open_file_cache_errors on | off 默认值:open_file_cache_errors off 使用字段:http, server, location 这个指令指定是否在搜索一个文件时记录cache错误.</span><br><span class="line">    open_file_cache_errors on;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http</span><br><span class="line">&#123;</span><br><span class="line">    #文件扩展名与文件类型映射表</span><br><span class="line">    include mime.types;</span><br><span class="line"></span><br><span class="line">    #默认文件类型</span><br><span class="line">    default_type application&#x2F;octet-stream;</span><br><span class="line"></span><br><span class="line">    #默认编码</span><br><span class="line">    #charset utf-8;</span><br><span class="line"></span><br><span class="line">    #服务器名字的hash表大小</span><br><span class="line">    #保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。参数hash bucket size总是等于hash表的大小，并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，那么在查找键的时候，最坏的情况下在内存中查找的次数为2。第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小.</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line"></span><br><span class="line">    #客户端请求头部的缓冲区大小。这个可以根据你的系统分页大小来设置，一般一个请求的头部大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。分页大小可以用命令getconf PAGESIZE取得。</span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line"></span><br><span class="line">    #客户请求头缓冲大小。nginx默认会用client_header_buffer_size这个buffer来读取header值，如果header过大，它会使用large_client_header_buffers来读取。</span><br><span class="line">    large_client_header_buffers 4 64k;</span><br><span class="line"></span><br><span class="line">    #设定通过nginx上传文件的大小</span><br><span class="line">    client_max_body_size 8m;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I&#x2F;O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">    #sendfile指令指定 nginx 是否调用sendfile 函数（zero copy 方式）来输出文件，对于普通应用，必须设为on。如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络IO处理速度，降低系统uptime。</span><br><span class="line">    sendfile on;</span><br><span class="line"></span><br><span class="line">    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">    autoindex on;</span><br><span class="line"></span><br><span class="line">    #此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用</span><br><span class="line">    tcp_nopush on;</span><br><span class="line">     </span><br><span class="line">    tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">    #长连接超时时间，单位是秒</span><br><span class="line">    keepalive_timeout 120;</span><br><span class="line"></span><br><span class="line">    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span><br><span class="line">    fastcgi_connect_timeout 300;</span><br><span class="line">    fastcgi_send_timeout 300;</span><br><span class="line">    fastcgi_read_timeout 300;</span><br><span class="line">    fastcgi_buffer_size 64k;</span><br><span class="line">    fastcgi_buffers 4 64k;</span><br><span class="line">    fastcgi_busy_buffers_size 128k;</span><br><span class="line">    fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line">    #gzip模块设置</span><br><span class="line">    gzip on; #开启gzip压缩输出</span><br><span class="line">    gzip_min_length 1k;    #最小压缩文件大小</span><br><span class="line">    gzip_buffers 4 16k;    #压缩缓冲区</span><br><span class="line">    gzip_http_version 1.0;    #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">    gzip_comp_level 2;    #压缩等级</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;x-javascript text&#x2F;css application&#x2F;xml;    #压缩类型，默认就已经包含textml，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">    gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #开启限制IP连接数的时候需要使用</span><br><span class="line">    #limit_zone crawler $binary_remote_addr 10m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #负载均衡配置</span><br><span class="line">    upstream jh.w3cschool.cn &#123;</span><br><span class="line">     </span><br><span class="line">        #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class="line">        server 192.168.80.121:80 weight&#x3D;3;</span><br><span class="line">        server 192.168.80.122:80 weight&#x3D;2;</span><br><span class="line">        server 192.168.80.123:80 weight&#x3D;3;</span><br><span class="line"></span><br><span class="line">        #nginx的upstream目前支持4种方式的分配</span><br><span class="line">        #1、轮询（默认）</span><br><span class="line">        #每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。</span><br><span class="line">        #2、weight</span><br><span class="line">        #指定轮询几率，weight和访问比率成正比，用于后端服务器性能不均的情况。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    server 192.168.0.14 weight&#x3D;10;</span><br><span class="line">        #    server 192.168.0.15 weight&#x3D;10;</span><br><span class="line">        #&#125;</span><br><span class="line">        #2、ip_hash</span><br><span class="line">        #每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</span><br><span class="line">        #例如：</span><br><span class="line">        #upstream bakend &#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 192.168.0.14:88;</span><br><span class="line">        #    server 192.168.0.15:80;</span><br><span class="line">        #&#125;</span><br><span class="line">        #3、fair（第三方）</span><br><span class="line">        #按后端服务器的响应时间来分配请求，响应时间短的优先分配。</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server server1;</span><br><span class="line">        #    server server2;</span><br><span class="line">        #    fair;</span><br><span class="line">        #&#125;</span><br><span class="line">        #4、url_hash（第三方）</span><br><span class="line">        #按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</span><br><span class="line">        #例：在upstream中加入hash语句，server语句中不能写入weight等其他的参数，hash_method是使用的hash算法</span><br><span class="line">        #upstream backend &#123;</span><br><span class="line">        #    server squid1:3128;</span><br><span class="line">        #    server squid2:3128;</span><br><span class="line">        #    hash $request_uri;</span><br><span class="line">        #    hash_method crc32;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        #tips:</span><br><span class="line">        #upstream bakend&#123;#定义负载均衡设备的Ip及设备状态&#125;&#123;</span><br><span class="line">        #    ip_hash;</span><br><span class="line">        #    server 127.0.0.1:9090 down;</span><br><span class="line">        #    server 127.0.0.1:8080 weight&#x3D;2;</span><br><span class="line">        #    server 127.0.0.1:6060;</span><br><span class="line">        #    server 127.0.0.1:7070 backup;</span><br><span class="line">        #&#125;</span><br><span class="line">        #在需要使用负载均衡的server中增加 proxy_pass http:&#x2F;&#x2F;bakend&#x2F;;</span><br><span class="line"></span><br><span class="line">        #每个设备的状态设置为:</span><br><span class="line">        #1.down表示单前的server暂时不参与负载</span><br><span class="line">        #2.weight为weight越大，负载的权重就越大。</span><br><span class="line">        #3.max_fails：允许请求失败的次数默认为1.当超过最大次数时，返回proxy_next_upstream模块定义的错误</span><br><span class="line">        #4.fail_timeout:max_fails次失败后，暂停的时间。</span><br><span class="line">        #5.backup： 其它所有的非backup机器down或者忙的时候，请求backup机器。所以这台机器压力会最轻。</span><br><span class="line"></span><br><span class="line">        #nginx支持同时设置多组的负载均衡，用来给不用的server来使用。</span><br><span class="line">        #client_body_in_file_only设置为On 可以讲client post过来的数据记录到文件中用来做debug</span><br><span class="line">        #client_body_temp_path设置记录文件的目录 可以设置最多3层目录</span><br><span class="line">        #location对URL进行匹配.可以进行重定向或者进行新的代理 负载均衡</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    #虚拟主机的配置</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        #域名可以有多个，用空格隔开</span><br><span class="line">        server_name www.w3cschool.cn w3cschool.cn;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root &#x2F;data&#x2F;www&#x2F;w3cschool;</span><br><span class="line"></span><br><span class="line">        #对******进行负载均衡</span><br><span class="line">        location ~ .*.(php|php5)?$</span><br><span class="line">        &#123;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            include fastcgi.conf;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #图片缓存时间设置</span><br><span class="line">        location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 10d;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #JS和CSS缓存时间设置</span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #日志格式设定</span><br><span class="line">        #$remote_addr与$http_x_forwarded_for用以记录客户端的ip地址；</span><br><span class="line">        #$remote_user：用来记录客户端用户名称；</span><br><span class="line">        #$time_local： 用来记录访问时间与时区；</span><br><span class="line">        #$request： 用来记录请求的url与http协议；</span><br><span class="line">        #$status： 用来记录请求状态；成功是200，</span><br><span class="line">        #$body_bytes_sent ：记录发送给客户端文件主体内容大小；</span><br><span class="line">        #$http_referer：用来记录从那个页面链接访问过来的；</span><br><span class="line">        #$http_user_agent：记录客户浏览器的相关信息；</span><br><span class="line">        #通常web服务器放在反向代理的后面，这样就不能获取到客户的IP地址了，通过$remote_add拿到的IP地址是反向代理服务器的iP地址。反向代理服务器在转发请求的http头信息中，可以增加x_forwarded_for信息，用以记录原有客户端的IP地址和原来客户端的请求的服务器地址。</span><br><span class="line">        log_format access &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span><br><span class="line">        &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span><br><span class="line">        &#39;&quot;$http_user_agent&quot; $http_x_forwarded_for&#39;;</span><br><span class="line">         </span><br><span class="line">        #定义本虚拟主机的访问日志</span><br><span class="line">        access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.log  main;</span><br><span class="line">        access_log  &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;logs&#x2F;host.access.404.log  log404;</span><br><span class="line">         </span><br><span class="line">        #对 &quot;&#x2F;&quot; 启用反向代理</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:88;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">             </span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">             </span><br><span class="line">            #以下是一些反向代理的配置，可选。</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line"></span><br><span class="line">            #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_max_body_size 10m;</span><br><span class="line"></span><br><span class="line">            #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            #如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，来提交任意小于256k的图片，都很正常。如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，问题就出现了。</span><br><span class="line">            #无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line"></span><br><span class="line">            #表示使nginx阻止HTTP应答代码为400或者更高的应答。</span><br><span class="line">            proxy_intercept_errors on;</span><br><span class="line"></span><br><span class="line">            #后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line">            #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_connect_timeout 90;</span><br><span class="line"></span><br><span class="line">            #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            #后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line">            proxy_send_timeout 90;</span><br><span class="line"></span><br><span class="line">            #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            #连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line">            proxy_read_timeout 90;</span><br><span class="line"></span><br><span class="line">            #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            #设置从被代理服务器读取的第一部分应答的缓冲区大小，通常情况下这部分应答中包含一个小的应答头，默认情况下这个值的大小为指令proxy_buffers中指定的一个缓冲区的大小，不过可以将其设置为更小</span><br><span class="line">            proxy_buffer_size 4k;</span><br><span class="line"></span><br><span class="line">            #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">            #设置用于读取应答（来自被代理服务器）的缓冲区数目和大小，默认情况也为分页大小，根据操作系统的不同可能是4k或者8k</span><br><span class="line">            proxy_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">            #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_busy_buffers_size 64k;</span><br><span class="line"></span><br><span class="line">            #设置在写入proxy_temp_path时数据的大小，预防一个工作进程在传递文件时阻塞太长</span><br><span class="line">            #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line">            proxy_temp_file_write_size 64k;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location &#x2F;NginxStatus &#123;</span><br><span class="line">            stub_status on;</span><br><span class="line">            access_log on;</span><br><span class="line">            auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file confpasswd;</span><br><span class="line">            #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #本地动静分离反向代理配置</span><br><span class="line">        #所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">        location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">        location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|</span><br><span class="line">        pdf|xls|mp3|wma)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 15d; </span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        location ~ .*.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires 1h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">######Nginx配置文件nginx.conf中文详解#####</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记</title>
    <url>/2020/08/30/Git%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="一、Gi简介"><a href="#一、Gi简介" class="headerlink" title="一、Gi简介"></a>一、Gi简介</h3><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p>
<a id="more"></a>

<h3 id="二、Git-下载和安装"><a href="#二、Git-下载和安装" class="headerlink" title="二、Git 下载和安装"></a>二、Git 下载和安装</h3><ul>
<li>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网</a>；官网下载速度慢的话可以使用<a href="http://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">淘宝镜像</a></li>
<li>使用默认值安装<ul>
<li><strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</li>
<li><strong>Git CMD：</strong>Windows风格的命令行</li>
<li><strong>Git GUI</strong>：图形界面的Git</li>
</ul>
</li>
<li>启动：单击鼠标右键选择 <code>Git Bash Here</code></li>
</ul>
<h3 id="三、Git-基本工作流程"><a href="#三、Git-基本工作流程" class="headerlink" title="三、Git 基本工作流程"></a>三、Git 基本工作流程</h3><blockquote>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200830143248760.png" alt="Git基本工作流程"></p>
<p>主要涉及到四个关键点：</p>
<ol>
<li>工作区：本地电脑存放项目文件的地方，比如learnGitProject文件夹；</li>
<li>暂存区（Index/Stage）：在使用git管理项目文件的时候，其本地的项目文件会多出一个.git的文件夹，将这个.git文件夹称之为版本库。其中.git文件夹中包含了两个部分，一个是暂存区（Index或者Stage）,顾名思义就是暂时存放文件的地方，通常使用add命令将工作区的文件添加到暂存区里；</li>
<li>本地仓库：.git文件夹里还包括git自动创建的master分支，并且将HEAD指针指向master分支。使用commit命令可以将暂存区中的文件添加到本地仓库中；</li>
<li>远程仓库：不是在本地仓库中，项目代码在远程git服务器上，比如项目放在github上，就是一个远程仓库，通常使用clone命令将远程仓库拷贝到本地仓库中，开发后推送到远程仓库中即可；</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200830144416387.png" alt="git流程"></p>
</blockquote>
<h3 id="四、Git使用前的配置命令"><a href="#四、Git使用前的配置命令" class="headerlink" title="四、Git使用前的配置命令"></a>四、Git使用前的配置命令</h3><ol>
<li><p>第一次使用git，配置用户信息</p>
<ul>
<li><p>配置用户名：<code>git config --global user.name &quot;your name&quot;</code>;</p>
</li>
<li><p>配置用户邮箱：<code>git config --global user.email &quot;youremail&quot;</code>;</p>
</li>
</ul>
</li>
<li><p>查询配置信息</p>
<ul>
<li><p>列出当前配置：<code>git config --list</code>;</p>
</li>
<li><p>列出repository配置：<code>git config --local --list</code>;</p>
</li>
<li><p>列出全局配置：<code>git config --global --list</code>;</p>
</li>
<li><p>列出系统配置：<code>git config --system --list</code>;</p>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>也可直接修改 <code>C:\Users\用户\.gitconfig</code></p>
</blockquote>
<h3 id="五、工作区上的操作命令"><a href="#五、工作区上的操作命令" class="headerlink" title="五、工作区上的操作命令"></a>五、工作区上的操作命令</h3><h4 id="（一）提交步骤"><a href="#（一）提交步骤" class="headerlink" title="（一）提交步骤"></a>（一）提交步骤</h4><ol>
<li><p><code>git init</code> 初始化git仓库</p>
<blockquote>
<ol>
<li>将工作区中的项目文件使用git进行管理，即创建一个新的本地仓库：<code>git init</code>；</li>
<li>从远程git仓库复制项目：<code>git clone &lt;url&gt;</code>; 克隆项目时如果想定义新的项目名，可以在clone命令后指定新的项目名：<code>git clone &lt;url&gt; NewName</code>；</li>
</ol>
<p>.git文件夹详解：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200830163908772.png" alt=".git文件夹"></p>
<ul>
<li>hook：存放一些shell脚本</li>
<li>info：存放仓库的信息</li>
<li>logs：保存所有更新的引用记录</li>
<li>object：存放所有的git对象</li>
<li>refs：<ul>
<li>head：保存当前最新的一次提交的哈希值</li>
</ul>
</li>
<li>COMMIT_EDITMSG：最新提交是一次commit message，git系统不会用到，给用户一个参考</li>
<li>description：仓库的描述信息，主要给gitweb等git托管系统使用</li>
<li>config：git仓库的配置文件</li>
<li>index：暂存区（stage），一个二进制文件</li>
<li>HEAD：映射到ref引用，能够找到下一次commit的前一次哈希值</li>
</ul>
</blockquote>
</li>
<li><p><code>git status</code> 查看文件状态</p>
<blockquote>
<ol>
<li>查询当前工作区所有文件的状态：<code>git status</code>;</li>
<li>比较工作区中当前文件和暂存区之间的差异，也就是修改之后还没有暂存的内容：<code>git diff</code>；指定文件在工作区和暂存区上差异比较：<code>git diff &lt;file-name&gt;</code>;</li>
</ol>
</blockquote>
</li>
<li><p><code>git add 文件名/目录名</code> 提交到暂存区</p>
<blockquote>
<ol>
<li>提交工作区所有文件到暂存区：<code>git add .</code></li>
<li>提交工作区中指定文件到暂存区：<code>git add 文件名</code>;</li>
<li>提交工作区中某个文件夹中所有文件到暂存区：<code>git add [dir]</code>;</li>
</ol>
</blockquote>
</li>
<li><p><code>git commit -m 提交信息</code> 向仓库提交代码</p>
<blockquote>
<ol>
<li>将暂存区中的文件提交到本地仓库中，即打上新版本：<code>git commit -m &quot;commit_info&quot;</code>;</li>
<li>将所有已经使用git管理过的文件暂存后一并提交，跳过add到暂存区的过程：<code>git commit -a -m &quot;commit_info&quot;</code>;</li>
<li>提交文件时，发现漏掉几个文件，或者注释写错了，可以撤销上一次提交：<code>git commit --amend</code>;</li>
</ol>
</blockquote>
</li>
<li><p><code>git log</code> 查看提交记录</p>
<blockquote>
<ol>
<li>比较暂存区与上一版本的差异：<code>git diff --cached</code>;</li>
<li>指定文件在暂存区和本地仓库的不同：<code>git diff --cached 文件名</code>;</li>
<li>查看提交历史：<code>git log</code>；参数<code>-p</code>展开每次提交的内容差异，用<code>-2</code>显示最近的两次更新，如<code>git log -p -2</code>;</li>
</ol>
</blockquote>
</li>
</ol>
<h4 id="（二）撤销"><a href="#（二）撤销" class="headerlink" title="（二）撤销"></a>（二）撤销</h4><ul>
<li>用暂存区中的文件覆盖工作目录中的文件：<code>git checkout -- 文件名</code>  不加 <code>-- 文件名</code>则覆盖全部文件</li>
<li>将文件从暂存区中删除：<code>git rm --cached 文件名</code></li>
<li>将git仓库中指定的更新记录恢复出来，并且覆盖暂存区和工作目录：<code>git reset --hard commitID</code>  </li>
<li><code>git rest --hard HEAD^</code>：回退到上一版；<br> <code>git rest --hard HEAD^^</code>：回退到倒数第二版；<br> <code>git rest --hard commitID</code>：回退到指定commit id版本；</li>
</ul>
<blockquote>
<p>git删除push到远程服务器的commit:<br> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.通过找到想要退回到的commit_id</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 2.本地回到上一个commit_id</span></span><br><span class="line">$ git reset --hard &lt;commit_id&gt;</span><br><span class="line"><span class="comment"># 3.推送到服务器，一定要加 --force 参数</span></span><br><span class="line">$ git push origin --force</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li><blockquote>
<blockquote>
<p>撤销</p>
</blockquote>
<ol>
<li>删除工作区文件，并且也从暂存区删除对应文件的记录：<code>git rm 文件名</code>;</li>
<li>从暂存区中删除文件，但是工作区依然还有该文件:<code>git rm --cached 文件名</code>;</li>
<li>取消暂存区已经暂存的文件：<code>git reset HEAD 文件名</code>;</li>
<li>撤销上一次对文件的操作：<code>git checkout --文件名</code>。要确定上一次对文件的修改不再需要，如果想保留上一次的修改以备以后继续工作，可以使用stashing和分支来处理；</li>
<li>隐藏当前变更，以便能够切换分支：<code>git stash</code>；</li>
<li>查看当前所有的储藏：<code>git stash list</code>；</li>
<li>应用最新的储藏：<code>git stash apply</code>，如果想应用更早的储藏：<code>git stash apply stash@{2}</code>；重新应用被暂存的变更，需要加上<code>--index</code>参数：<code>git stash apply --index</code>;</li>
<li>使用apply命令只是应用储藏，而内容仍然还在栈上，需要移除指定的储藏：<code>git stash drop stash{0}</code>；如果使用pop命令不仅可以重新应用储藏，还可以立刻从堆栈中清除：<code>git stash pop</code>;</li>
<li>在某些情况下，你可能想应用储藏的修改，在进行了一些其他的修改后，又要取消之前所应用储藏的修改。Git没有提供类似于 stash unapply 的命令，但是可以通过取消该储藏的补丁达到同样的效果：<code>git stash show -p stash@{0} | git apply -R</code>；同样的，如果你沒有指定具体的某个储藏，Git 会选择最近的储藏：<code>git stash show -p | git apply -R</code>；</li>
</ol>
<blockquote>
<p>更新文件</p>
</blockquote>
<ol>
<li>重命名文件，并将已改名文件提交到暂存区：<code>git mv [file-original] [file-renamed]</code>;</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="六、分支"><a href="#六、分支" class="headerlink" title="六、分支"></a>六、分支</h3><p>生成副本，避免影响开发主线。</p>
<h4 id="（一）分支细分"><a href="#（一）分支细分" class="headerlink" title="（一）分支细分"></a>（一）分支细分</h4><ol>
<li>主分支（master）：第一次向git仓库提交更新记录时自动产生的一个分支。</li>
<li>开发分支（develop）：作为开发的分支，基于master分支创建。</li>
<li>功能分支（feature）：作为开发具体功能的分支基于开发分支创建。</li>
</ol>
<blockquote>
<p>master主分支应该非常稳定，用来发布新版本，一般情况下不允许在上面工作，工作一般情况下在新建的dev分支上工作，工作完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来。</p>
</blockquote>
<h4 id="（二）分支命令"><a href="#（二）分支命令" class="headerlink" title="（二）分支命令"></a>（二）分支命令</h4><ul>
<li><code>git branch</code> 查看本地分支</li>
<li><code>git branch -r</code> 列出所有远程分支</li>
<li><code>git branch 分支名称</code> 创建分支，但是依然停留在当前分支</li>
<li><code>git checkout -b 分支名称</code> 新建一个分支，并切换到该分支</li>
<li><code>git checkout 分支名称</code> 切换分支</li>
<li><code>git merge 来源分支</code> 合并指定分支到当前分支</li>
<li><code>git branch -d 分支名称</code> 删除分支（分支合并后才允许被删除）（-D 大写强制删除）</li>
<li><code>git push origin 分支名称</code> 删除远程分支</li>
</ul>
<p>注意：</p>
<p>​        开发分支文件后要 <code>commit</code> 后再切换主分支，否则分支文件会出现在主分支里面。</p>
<blockquote>
<blockquote>
<p>分支管理</p>
</blockquote>
<ol>
<li>创建分支：<code>git branch</code>，如<code>git branch testing</code>；</li>
<li>从当前所处的分支切换到其他分支：<code>git checkout</code>，如<code>git checkout testing</code>；</li>
<li>新建并切换到新建分支上：<code>git checkout -b</code>;</li>
<li>删除分支：<code>git branch -d</code>；</li>
<li>将当前分支与指定分支进行合并：<code>git merge</code>;</li>
<li>显示本地仓库的所有分支：<code>git branch</code>;</li>
<li>查看各个分支最后一个提交对象的信息：<code>git branch -v</code>;</li>
<li>查看哪些分支已经合并到当前分支：<code>git branch --merged</code>;</li>
<li>查看当前哪些分支还没有合并到当前分支：<code>git branch --no-merged</code>;</li>
<li>把远程分支合并到当前分支：<code>git merge /</code>，如<code>git merge origin/serverfix</code>；如果是单线的历史分支不存在任何需要解决的分歧，只是简单的将HEAD指针前移，所以这种合并过程可以称为快进（Fast forward），而如果是历史分支是分叉的，会以当前分叉的两个分支作为两个祖先，创建新的提交对象；如果在合并分支时，遇到合并冲突需要人工解决后，再才能提交；</li>
<li>在远程分支的基础上创建新的本地分支<code>：git checkout -b  /</code>，如<code>git checkout -b serverfix origin/serverfix</code>;</li>
<li>从远程分支checkout出来的本地分支，称之为跟踪分支。在跟踪分支上向远程分支上推送内容：<code>git push</code>。该命令会自动判断应该向远程仓库中的哪个分支推送数据；在跟踪分支上合并远程分支：<code>git pull</code>；</li>
<li>将一个分支里提交的改变移到基底分支上重放一遍：<code>git rebase</code>，如<code>git rebase master server</code>，将特性分支server提交的改变在基底分支master上重演一遍；使用rebase操作最大的好处是像在单个分支上操作的，提交的修改历史也是一根线；如果想把基于一个特性分支上的另一个特性分支变基到其他分支上，可以使用<code>--onto</code>操作：<code>git rebase --onto</code>，如<code>git rebase --onto master server client</code>；使用rebase操作应该遵循的原则是：<strong>一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行rebase操作</strong>；</li>
</ol>
</blockquote>
<h3 id="七、暂时保存更改"><a href="#七、暂时保存更改" class="headerlink" title="七、暂时保存更改"></a>七、暂时保存更改</h3><p>git中可以不提交更改，只提取分支上所有改动并储存，让开发人员得到一个干净的副本，临时转向其它工作。复制到“剪切板”，可以“粘贴“到其它分支。</p>
<p>场景：</p>
<ul>
<li>储存临时改动：<code>git stash</code></li>
<li>恢复临时改动：<code>git stash pop</code></li>
</ul>
<h3 id="八、打标签"><a href="#八、打标签" class="headerlink" title="八、打标签"></a>八、打标签</h3><blockquote>
<blockquote>
<p>打标签</p>
</blockquote>
<p>Git 使用的标签有两种类型：<strong>轻量级的（lightweight）和含附注的（annotated）</strong>。轻量级标签就像是个不会变化的分支，实际上它就是个指向特定提交对象的引用。而含附注标签，实际上是存储在仓库中的一个独立对象，它有自身的校验和信息，包含着标签的名字，电子邮件地址和日期，以及标签说明，标签本身也允许使用 GNU Privacy Guard (GPG) 来签署或验证。一般我们都建议使用含附注型的标签，以便保留相关信息；当然，如果只是临时性加注标签，或者不需要旁注额外信息，用轻量级标签也没问题。</p>
<ol>
<li>列出现在所有的标签：<code>git tag</code>;</li>
<li>使用特定的搜索模式列出符合条件的标签，例如只对1.4.2系列的版本感兴趣：<code>git tag -l &quot;v1.4.2.*&quot;</code>;</li>
<li>创建一个含附注类型的标签，需要加<code>-a</code>参数，如<code>git tag -a v1.4 -m &quot;my version 1.4&quot;</code>;</li>
<li>使用git show命令查看相应标签的版本信息，并连同显示打标签时的提交对象：<code>git show v1.4</code>;</li>
<li>如果有自己的私钥，可以使用GPG来签署标签，只需要在命令中使用<code>-s</code>参数：<code>git tag -s v1.5 -m &quot;my signed 1.5 tag&quot;</code>;</li>
<li>验证已签署的标签：git tag -v ，如<code>git tag -v v1.5</code>;</li>
<li>创建一个轻量级标签的话，就直接使用git tag命令即可，连<code>-a</code>,<code>-s</code>以及<code>-m</code>选项都不需要，直接给出标签名字即可，如<code>git tag v1.5</code>;</li>
<li>将标签推送到远程仓库中：git push origin ，如<code>git push origin v1.5</code>；</li>
<li>将本地所有的标签全部推送到远程仓库中：<code>git push origin --tags</code>;</li>
</ol>
</blockquote>
<h3 id="九、多人协作开发流程"><a href="#九、多人协作开发流程" class="headerlink" title="九、多人协作开发流程"></a>九、多人协作开发流程</h3><ul>
<li>A在自己的计算机中创建本地仓库</li>
<li>A在GitHub中创建远程仓库</li>
<li>A将本地仓库推送到远程仓库</li>
<li>B克隆远程仓库到本地进行开发</li>
<li>B将本地仓库开发内容推送到远程仓库</li>
<li>A将远程仓库中的最新内容拉去本地</li>
</ul>
<h3 id="十、推送到远程仓库"><a href="#十、推送到远程仓库" class="headerlink" title="十、推送到远程仓库"></a>十、推送到远程仓库</h3><ol>
<li><p><code>git push 远程仓库地址 分支名称</code> </p>
</li>
<li><p><code>git push 远程仓库地址别名 分支名称</code></p>
</li>
<li><p><code>git push -u 远程仓库地址别名 分支名称</code> </p>
<p><code>-u</code> 记住推送地址和分支，下次只需要输入<code>git push</code></p>
</li>
<li><p><code>git remote add 远程仓库地址别名 远程仓库地址</code></p>
</li>
<li><p>删除别名：<code>git remote remove 远程仓库地址别名</code></p>
</li>
<li><p>第一次提交需要用户名和密码，电脑会记住密码在凭据管理器，第二次就不用了。</p>
</li>
</ol>
<h3 id="十一、本地仓库上的操作"><a href="#十一、本地仓库上的操作" class="headerlink" title="十一、本地仓库上的操作"></a>十一、本地仓库上的操作</h3><ol>
<li><p>查看本地仓库关联的远程仓库：<code>git remote</code>；在克隆完每个远程仓库后，远程仓库默认为<code>origin</code>;加上<code>-v</code>的参数后，会显示远程仓库的<code>url</code>地址；</p>
</li>
<li><p>添加远程仓库，一般会取一个简短的别名：<code>git remote add [remote-name] [url]</code>，比如：<code>git remote add example git://github.com/example/example.git</code>;</p>
</li>
<li><p>从远程仓库中抓取本地仓库中没有的更新：<code>git fetch [remote-name]</code>，如<code>git fetch origin</code>;使用fetch只是将远端数据拉到本地仓库，并不自动合并到当前工作分支，只能人工合并。如果设置了某个分支关联到远程仓库的某个分支的话，可以使用<code>git pull</code>来拉去远程分支的数据，然后将远端分支自动合并到本地仓库中的当前分支；</p>
</li>
<li><p>将本地仓库某分支推送到远程仓库上：<code>git push [remote-name] [branch-name]</code>，如<code>git push origin master</code>；如果想将本地分支推送到远程仓库的不同名分支：<code>git push  :</code>，如<code>git push origin serverfix:awesomebranch</code>;如果想删除远程分支：<code>git push [romote-name] :</code>，如<code>git push origin :serverfix</code>。这里省略了本地分支，也就相当于将空白内容推送给远程分支，就等于删掉了远程分支。</p>
</li>
<li><p>查看远程仓库的详细信息：<code>git remote show origin</code>；</p>
</li>
<li><p>修改某个远程仓库在本地的简称：<code>git remote rename [old-name] [new-name]</code>，如<code>git remote rename origin org</code>；</p>
</li>
<li><p>移除远程仓库：<code>git remote rm [remote-name]</code>；</p>
</li>
</ol>
<h3 id="十二、拉取仓库、克隆仓库"><a href="#十二、拉取仓库、克隆仓库" class="headerlink" title="十二、拉取仓库、克隆仓库"></a>十二、拉取仓库、克隆仓库</h3><ul>
<li><p>克隆远程仓库到本地：<code>git clone 仓库地址</code></p>
</li>
<li><p>拉取远程仓库最新版本到本地：<code>git pull 远程仓库地址 分支名称</code></p>
</li>
</ul>
<h3 id="十三、解决冲突"><a href="#十三、解决冲突" class="headerlink" title="十三、解决冲突"></a>十三、解决冲突</h3><p>多人开发同一个项目时，如果两个人修改了同一个文件同一个地方</p>
<ol>
<li><code>git pull</code></li>
<li>手动解决冲突 </li>
<li><code>git push</code> </li>
</ol>
<h3 id="十四、跨团队协作"><a href="#十四、跨团队协作" class="headerlink" title="十四、跨团队协作"></a>十四、跨团队协作</h3><ol>
<li><code>fork</code>到自己的远程仓库</li>
<li><code>clone</code>到本地进行修改</li>
<li><code>push</code>到远程仓库</li>
<li><code>pull request</code>发送给原作者</li>
<li>原作者查看<code>commit</code> 审核</li>
<li>原作者 <code>merge pull request</code> </li>
</ol>
<h3 id="十五、SSH免密登录"><a href="#十五、SSH免密登录" class="headerlink" title="十五、SSH免密登录"></a>十五、SSH免密登录</h3><ol>
<li><p>生成密钥：<code>ssh-keygen</code></p>
<p>密匙储存目录：<code>C:\User\用户\\.ssh</code></p>
<p>公钥名称：<code>id_rsa.pub</code> </p>
<p>私钥名称：<code>id_rsa</code></p>
</li>
<li><p>Github添加公钥</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20191115165957.png" alt></p>
</li>
</ol>
<h3 id="十六、Git忽略清单"><a href="#十六、Git忽略清单" class="headerlink" title="十六、Git忽略清单"></a>十六、Git忽略清单</h3><p>将不需要的文件名字添加到此文件中，执行git 命令时就会忽略这些文件。在主目录下建立”.gitignore”文件，此文件有如下规则：</p>
<ol>
<li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li>
<li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li>
<li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li>
<li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li>
<li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li>
</ol>
<ul>
<li><p>git忽略清单文件名称：<code>.gitignore</code></p>
</li>
<li><p>将工作目录所有文件添加到缓存区：<code>git add .</code></p>
</li>
<li><p>例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 此为注释 – 将被 Git 忽略</span><br><span class="line"># 忽略所有 .a 结尾的文件</span><br><span class="line">*.a</span><br><span class="line"># 但 lib.a 除外</span><br><span class="line">!lib.a</span><br><span class="line"># 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class="line">&#x2F;TODO</span><br><span class="line"># 忽略 build&#x2F; 目录下的所有文件</span><br><span class="line">build&#x2F;</span><br><span class="line"># 会忽略 doc&#x2F;notes.txt 但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class="line">doc&#x2F;*.txt</span><br><span class="line"># 忽略 doc&#x2F; 目录下所有扩展名为 txt 的文件</span><br><span class="line">doc&#x2F;**&#x2F;*.txt</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>参考：</p>
<ol>
<li><a href="https://github.com/Eished/git_notes" target="_blank" rel="noopener">https://github.com/Eished/git_notes</a></li>
<li><a href="https://juejin.im/post/6844903598522908686" target="_blank" rel="noopener">https://juejin.im/post/6844903598522908686</a></li>
<li><a href="https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Bf7uVhGiu47uOELjmC5uXQ</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenLayers入门-创建一个openlayers应用程序</title>
    <url>/2020/08/09/OpenLayers%E5%85%A5%E9%97%A8-%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAopenlayers%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h4 id="一、node环境创建openlayers应用"><a href="#一、node环境创建openlayers应用" class="headerlink" title="一、node环境创建openlayers应用"></a>一、node环境创建openlayers应用</h4><p>1、为项目创建一个目录，进入项目目录，使用<code>npm install</code>初始化项目</p>
<p>2、使用<code>npm install ol</code>将OpenLayers作为依赖项添加到您的应用程序</p>
<p>3、通过运行<code>npm install --save-dev parcel-bundler</code>请求NPM添加所需的开发依赖项</p>
<p>4、创建index.js文件，内容如下：</p>
<a id="more"></a>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'ol/ol.css'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    <span class="built_in">Map</span>,</span><br><span class="line">    View</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'ol'</span>;</span><br><span class="line"><span class="keyword">import</span> TileLayer <span class="keyword">from</span> <span class="string">'ol/layer/Tile'</span>;</span><br><span class="line"><span class="keyword">import</span> OSM <span class="keyword">from</span> <span class="string">'ol/source/OSM'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">    target: <span class="string">'map'</span>,</span><br><span class="line">    layers: [</span><br><span class="line">        <span class="keyword">new</span> TileLayer(&#123;</span><br><span class="line">            source: <span class="keyword">new</span> OSM()</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    view: <span class="keyword">new</span> View(&#123;</span><br><span class="line">        center: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        zoom: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>5、创建index.html文件，如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Using Parcel with OpenLayers<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#map</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 250px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>6、创建一个bundle</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"parcel-bundler"</span>: <span class="string">"^1.12.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"parcel index.html"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"parcel build --public-url . index.html"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://qny.suixinya.top/HexoBlog/20200809223344.png" alt></p>
<p>7、启动应用<code>npm start</code>,要测试您的应用程序，请在浏览器中打开http：// localhost：1234 /。 每当您更改某些内容时，页面都会自动重新加载以显示更改结果。</p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200809223505.png" alt></p>
<p><img src="http://qny.suixinya.top/HexoBlog/20200809223645.png" alt></p>
<blockquote>
<p>要创建应用程序的生产包，只需键入<code>npm run build</code>,并将dist/文件夹复制到生产服务器。</p>
</blockquote>
<h4 id="二、快速在web页面上放置一个简单的地图"><a href="#二、快速在web页面上放置一个简单的地图" class="headerlink" title="二、快速在web页面上放置一个简单的地图"></a>二、快速在web页面上放置一个简单的地图</h4><blockquote>
<p>对于生产环境，强烈建议将应用程序与其依赖项绑定在一起，正如构建OpenLayers应用程序教程中所解释的那样。(使用node搭建)</p>
</blockquote>
<p>下面是一个完整的工作示例。创建一个新文件，复制下面的内容，然后在浏览器中打开：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/css/ol.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.map</span> &#123;</span></span><br><span class="line">        height: 400px;</span><br><span class="line">        width: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.4.3/build/ol.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>OpenLayers example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Map<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"map"</span> <span class="attr">class</span>=<span class="string">"map"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> map = <span class="keyword">new</span> ol.Map(&#123;</span></span><br><span class="line"><span class="actionscript">        target: <span class="string">'map'</span>,</span></span><br><span class="line">        layers: [</span><br><span class="line"><span class="actionscript">          <span class="keyword">new</span> ol.layer.Tile(&#123;</span></span><br><span class="line"><span class="actionscript">            source: <span class="keyword">new</span> ol.source.OSM()</span></span><br><span class="line">          &#125;)</span><br><span class="line">        ],</span><br><span class="line"><span class="actionscript">        view: <span class="keyword">new</span> ol.View(&#123;</span></span><br><span class="line">          center: ol.proj.fromLonLat([37.41, 8.82]),</span><br><span class="line">          zoom: 4</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上的ol.css和ol.js服务器在国外，在国内访问速度会很慢，可以在<a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">BootCDN</a>,中查找引用。</p>
]]></content>
      <categories>
        <category>OpenLayers</category>
      </categories>
  </entry>
  <entry>
    <title>使用IDEA打包JAR包</title>
    <url>/2020/08/28/IDEA%E6%89%93%E5%8C%85jar%E5%8C%85/</url>
    <content><![CDATA[<ol>
<li>打开Project Structure</li>
</ol>
<a id="more"></a>

<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195200962.png" alt="image-20200828195200962"></p>
<ol start="2">
<li>选择Artifacts，选择JAR包，选择依赖</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195328024.png" alt="image-20200828195328024"></p>
<ol start="3">
<li>选择main方法</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195549657.png" alt="image-20200828195549657"></p>
<ol start="3">
<li>Apply</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195630643.png" alt="image-20200828195630643"></p>
<ol start="4">
<li>Buid -&gt; Build Artifacts</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195706475.png" alt="image-20200828195706475"></p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195841246.png" alt="image-20200828195841246"></p>
<ol start="5">
<li>完成打包</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828195926338.png" alt="image-20200828195926338"></p>
<ol start="6">
<li>运行<code>java -jar Snake,jar</code></li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828200355471.png" alt="image-20200828200355471"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2020/08/26/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h4 id="一、Java的特性和优势"><a href="#一、Java的特性和优势" class="headerlink" title="一、Java的特性和优势"></a>一、Java的特性和优势</h4><p>简单性、面向对象、可移植性、高性能、分布式、动态性、多线程、安全性、健壮性</p>
<h4 id="二、Java的三大版本"><a href="#二、Java的三大版本" class="headerlink" title="二、Java的三大版本"></a>二、Java的三大版本</h4><p>JavaSE: 标准版（桌面程序、控制台开发）</p>
<p>JavaME: 嵌入式开发（手机、小家电）</p>
<p>JavaEE：企业级开发（web端、服务区开发）</p>
<h4 id="三、JDK、-JRE、-JVM"><a href="#三、JDK、-JRE、-JVM" class="headerlink" title="三、JDK、 JRE、 JVM"></a>三、JDK、 JRE、 JVM</h4><p>JDK：java development kit</p>
<p>JRE: java runtime environment</p>
<p>JVM: java virtual machine</p>
<a id="more"></a>

<h4 id="四、开发环境搭建"><a href="#四、开发环境搭建" class="headerlink" title="四、开发环境搭建"></a>四、开发环境搭建</h4><p>下载安装，配置环境变量。</p>
<h4 id="五、HelloWorld程序"><a href="#五、HelloWorld程序" class="headerlink" title="五、HelloWorld程序"></a>五、HelloWorld程序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">"Hello World!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>java运行需要先使用<code>javac HelloWorld.java</code>命令对java文件进行编译，编译会自动生成一个同名的以<code>.class</code>为后缀的类文件放在同一目录，然后再执行<code>java HelloWorld</code>来运行。</p>
<blockquote>
<p>注意：此处运行“java”命令，java后只能跟文件名，不需要任何后缀，否则也会报错，错误如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\Code\java&gt;java HelloWorld.class</span><br><span class="line">错误: 找不到或无法加载主类 HelloWorld.class</span><br><span class="line">原因: java.lang.ClassNotFoundException: HelloWorld.class</span><br></pre></td></tr></table></figure>

<h4 id="六、Java程序运行机制"><a href="#六、Java程序运行机制" class="headerlink" title="六、Java程序运行机制"></a>六、Java程序运行机制</h4><p>编译型、解释型</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200827094558432.png" alt></p>
<ul>
<li>有的编程语言要求必须提前将所有源代码一次性转换成二进制指令，也就是生成一个可执行程序（Windows 下的 .exe），比如C语言、<a href="http://c.biancheng.net/cplus/" target="_blank" rel="noopener">C++</a>、Golang、Pascal（Delphi）、汇编等，这种编程语言称为编译型语言，使用的转换工具称为编译器。</li>
<li>有的编程语言可以一边执行一边转换，需要哪些源代码就转换哪些源代码，不会生成可执行程序，比如 <a href="http://c.biancheng.net/python/" target="_blank" rel="noopener">Python</a>、<a href="http://c.biancheng.net/js/" target="_blank" rel="noopener">JavaScript</a>、<a href="http://c.biancheng.net/php/" target="_blank" rel="noopener">PHP</a>、Shell、<a href="http://c.biancheng.net/matlab/" target="_blank" rel="noopener">MATLAB</a> 等，这种编程语言称为解释型语言，使用的转换工具称为解释器。</li>
</ul>
<blockquote>
<p><a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java</a> 和 <a href="http://c.biancheng.net/csharp/" target="_blank" rel="noopener">C#</a> 是一种比较奇葩的存在，它们是半编译半解释型的语言，源代码需要先转换成一种中间文件（字节码文件），然后再将中间文件拿到虚拟机中执行。Java 引领了这种风潮，它的初衷是在跨平台的同时兼顾执行效率；C# 是后来的跟随者，但是 C# 一直止步于 Windows 平台，在其它平台鲜有作为。</p>
</blockquote>
<h4 id="七、注释"><a href="#七、注释" class="headerlink" title="七、注释"></a>七、注释</h4><p>单行注释、多行注释、文档注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JavaDoc:文档注释，可以被识别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> HelloWorld</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> suixin</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h4 id="八、数据类型"><a href="#八、数据类型" class="headerlink" title="八、数据类型"></a>八、数据类型</h4><p><strong>强类型语言</strong>：要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用；java、.NET、C++等都是强制类型定义的。一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。</p>
<p><strong>弱类型语言：</strong>数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。你想把这个变量当做什么类型来用，就当做什么类型来用，语言的解析器会自动（隐式）转换。例如：JavaScript、VB</p>
<p>Java的数据类型分为两大类：</p>
<ul>
<li>基本类型：数值类型（整数类型、浮点类型、字符类型）、bool类型</li>
<li>引用类型：类、接口、数组</li>
</ul>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200827104335969.png" alt="image-20200827104335969"></p>
<p><strong>Java的基本数据类型</strong></p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th>关键字</th>
<th>占用内存</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>字节型</td>
<td>byte</td>
<td>1 字节</td>
<td>-128~127</td>
</tr>
<tr>
<td>短整型</td>
<td>short</td>
<td>2 字节</td>
<td>-32768~32767</td>
</tr>
<tr>
<td>整型</td>
<td>int</td>
<td>4 字节</td>
<td>-2147483648~2147483647</td>
</tr>
<tr>
<td>长整型</td>
<td>long</td>
<td>8 字节</td>
<td>-9223372036854775808L~9223372036854775807L</td>
</tr>
<tr>
<td>单精度浮点型</td>
<td>float</td>
<td>4 字节</td>
<td>+/-3.4E+38F（6~7 个有效位）</td>
</tr>
<tr>
<td>双精度浮点型</td>
<td>double</td>
<td>8 字节</td>
<td>+/-1.8E+308 (15 个有效位）</td>
</tr>
<tr>
<td>字符型</td>
<td>char</td>
<td>2 字节</td>
<td>ISO 单一字符集</td>
</tr>
<tr>
<td>布尔型</td>
<td>boolean</td>
<td>1 字节</td>
<td>true 或 false</td>
</tr>
</tbody></table>
<blockquote>
<p>位（bit）：是计算机内部数据存储的最小单位。 例如：11001100是一个八位二进制数。</p>
<p>字节（byte）：是计算机中数据处理的基本单位，习惯上用大写的B来表示；1B = 8 bit</p>
<p>字符：是指计算机中使用的字母、数据、字和符号。</p>
</blockquote>
<ol>
<li>进制：二进制（0b）、八进制（0）、十进制、十六进制（0x）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>; <span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">010</span>; <span class="comment">//八进制。8</span></span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0x10</span>; <span class="comment">//十六进制。16 0-9 A - F</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>银行业务怎么表示？（钱）</li>
</ol>
<p>BigDecimal数学工具类；不能使用float和double。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">System.out.println(f==d);</span><br><span class="line">System.out.println(f);</span><br><span class="line">System.out.println(d);</span><br><span class="line"><span class="keyword">float</span> f2 = <span class="number">4545445555445f</span>;</span><br><span class="line"><span class="keyword">float</span> f3 = f2+<span class="number">1</span>;</span><br><span class="line">System.out.println(f2 == f3);</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span><br><span class="line">0.1</span><br><span class="line">0.1</span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>float 有限 离散 舍入误差 大约接近但是不等于；少用浮点数进行比较，要精确比较时使用BIgDecimal。</p>
<ol start="3">
<li>所有的字符本质还是数字，编码 Unicode码表（97 = a   65 = A） 2字节，0-65536</li>
</ol>
<h4 id="九、类型转化"><a href="#九、类型转化" class="headerlink" title="九、类型转化"></a>九、类型转化</h4><p>由于Java是强类型语言，所以要进行运行的时候需要用到类型转换；运算中，不同类型的数据先转换为同一类型，然后进行计算。</p>
<p><strong>强制类型转换</strong>：从高到低</p>
<p><strong>自动类型转换</strong>：从低到高</p>
<p>JDK新特性：数字之间可以用下划线分割，例如：<code>int money = 10_0000_0000</code></p>
<h4 id="十、变量和常量"><a href="#十、变量和常量" class="headerlink" title="十、变量和常量"></a>十、变量和常量</h4><p>java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域；</p>
<p><strong>变量作用域</strong></p>
<p>类变量：static修饰</p>
<p>实例变量：从属于对象；如果不进行初始化，这个类型的默认值（0 0.0 、bool型默认是false）， 除了基本类型其余的默认值都是null，</p>
<p>局部变量：必须声明和初始化值；</p>
<p><strong>常量</strong></p>
<p>常量：初始化之后不能再改变值。它的值被设定后在程序运行的过程中不允许被改变，用<code>final</code>修饰。常量名一般使用大写。</p>
<h4 id="十一、运算符"><a href="#十一、运算符" class="headerlink" title="十一、运算符"></a>十一、运算符</h4><p><strong>算术运算符：+,-,*,/,%,++,–</strong></p>
<p><strong>赋值运算符:=</strong></p>
<p><strong>关系运算符:&gt;,&lt;,&gt;=,&lt;=,==,!=, instanceof</strong></p>
<p><strong>逻辑运算符:&amp;&amp;,||,!</strong></p>
<p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>
<p>条件运算符：    ？ ：</p>
<p>扩展赋值运算符： +=    、        -=    、    *=    、    /=</p>
<blockquote>
<p>a++:先赋值再进行自增；</p>
<p>++a:先自增在进行赋值;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="keyword">int</span> c = ++a;</span><br><span class="line">System.out.println(b);<span class="comment">//b = 2;</span></span><br><span class="line">System.out.println(c);<span class="comment">//c = 4;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>位运算符：&lt;&lt; 相当于*2            &gt;&gt; 相当于/2；可以提高运算的效率，直接与底层打交道；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>*<span class="number">8</span> = <span class="number">16</span>              <span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span>*<span class="number">2</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span>	<span class="number">0</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span>   <span class="number">2</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0010</span>	<span class="number">4</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0100</span>	<span class="number">8</span></span><br><span class="line"><span class="number">0000</span> <span class="number">1000</span>   <span class="number">16</span></span><br></pre></td></tr></table></figure>

<p><strong>运算符的优先级</strong></p>
<h4 id="十二、包机制"><a href="#十二、包机制" class="headerlink" title="十二、包机制"></a>十二、包机制</h4><p>为了更好地组织类，Java提供了包机制，用于区别类名的命名空间。包语句的语法格式为：<code>package pkg1[.pkg2[.pkg3...]]</code></p>
<p>一般利用公司域名倒置作为包名；为了能够使用某一个包的成员，我们需要在Java程序中明确导入该包。使用<code>import</code>语句可完成此功能；</p>
<h4 id="十三、JavaDoc"><a href="#十三、JavaDoc" class="headerlink" title="十三、JavaDoc"></a>十三、JavaDoc</h4><p>Javadoc命令是用来生成自己API文档的</p>
<p>参数信息：</p>
<ul>
<li>@author 作者名</li>
<li>@version 版本号</li>
<li>@since 指明需要最早使用的jdk版本</li>
<li>@param 返回值情况</li>
<li>@throws 异常抛出情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 随心</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>学会生成JavaDoc文档：</p>
<ul>
<li>使用命令：javadoc 参数 Java文件</li>
<li>使用IDEA：tool ——&gt; Generate JavaDoc</li>
</ul>
<h4 id="十四、Scanner对象"><a href="#十四、Scanner对象" class="headerlink" title="十四、Scanner对象"></a>十四、Scanner对象</h4><p>java.util.Scanner是Java5的新特性，我们可以通过Scanner类来获取用户的输入；</p>
<p>通过Scanner类的next()与nextLine()方法获取输入的字符串，在读取之前我们一般需要使用hasNext()与hasNextLine()判断是否还有输入的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"使用next方法接受："</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext())&#123;</span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">"输入的内容为："</span> + str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();<span class="comment">//凡是属于IO流的类如果不关闭会一直占用资源，用完就关掉</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/.top//C:%5CUsers%5C%E9%9A%8F%E5%BF%83%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200827163725987.png" alt="image-20200827163725987"></p>
<h4 id="十五、Java方法详解"><a href="#十五、Java方法详解" class="headerlink" title="十五、Java方法详解"></a>十五、Java方法详解</h4><p>设计方法的原则：方法的本意是功能模块，就是实现某个功能的语句块的集合。设计时最好保持方法的原子性，就是一个方法只完成一个功能，这样有利于我们后期扩展。</p>
<p>值传递和引用传递，Java是值传递；</p>
<p><strong>方法的重载</strong></p>
<p>方法重载的规则：</p>
<ul>
<li>方法名必须相同</li>
<li>参数列表必须不同（个数不同，类型不同，参数排列顺序不同等）</li>
<li>方法的返回值类型可以相同也可以不同</li>
<li>仅仅返回值类型不同不足以成为方法的重载</li>
</ul>
<p>实现理论：方法名相同时，编译器会根据调用的方法的参数个数、参数类型等逐个匹配，选择对应的方法，匹配不到则报错；</p>
<p>可变参数：在方法声明中，在指定参数类型后加一个省略号。一个方法中只能指定一个可变参数，它必须是方法的最后一个参数，任何普通的参数必须在它之前声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo01 demo01 = <span class="keyword">new</span> Demo01();</span><br><span class="line">        demo01.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> ...i)</span></span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="十六、递归"><a href="#十六、递归" class="headerlink" title="十六、递归"></a>十六、递归</h4><p>递归就是方法自己调用自己；</p>
<p>递归结构包括两个部分：</p>
<ul>
<li><p>递归头：什么时候不调用自己，如果没有头将陷入死循环；</p>
</li>
<li><p>递归体：什么时候需要调用自身方法。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘</span></span><br><span class="line"><span class="keyword">package</span> com.suixin.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(f(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="十七、数组"><a href="#十七、数组" class="headerlink" title="十七、数组"></a>十七、数组</h4><p>数组：相同类型数据的有序集合。</p>
<p>数组的声明：<code>数据类型[] 数组名</code>或者<code>数据类型 数组名[]</code></p>
<p>Java语言使用new操作符来创建数组。<code>dataType[] myArray = new dataType[arraySize]</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums;<span class="comment">//声明 在栈中（声明的时候数组并不存在，只有创建的时候才存在）</span></span><br><span class="line">nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];<span class="comment">//创建数组 在堆中</span></span><br><span class="line">nums[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//数组赋值</span></span><br></pre></td></tr></table></figure>

<p>内存分析：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200827183820109.png" alt="image-20200827183820109"></p>
<p><strong>数组的三种初始化：</strong></p>
<ul>
<li><p>静态初始化：<code>int[] a = {1,2,3}</code></p>
</li>
<li><p>动态初始化：<code>int[] a = new int[2]; a[0] = 1; a[1] = 2;</code></p>
</li>
<li><p>数组的默认初始化:数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配，其中的每个元素也被按照实例变量同样的方式被隐式初始化（没赋值之前就有默认的值，int为0，string为null等）。</p>
</li>
</ul>
<p><strong>数组对象本身在堆中</strong></p>
<p><strong>多维数组</strong></p>
<p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一堆数组，其每一个元素都是一个一维数组。</p>
<p>二维数组：例如：<code>int a[][] = new int[2][5]</code>，是一个2行5列的数组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="http://qny.suixinya.top/HexoBlog/image-20200827185834816.png" alt="image-20200827185834816"></p>
<p>Array类：数组的工具类java.util.Arrays,由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本操作；Arrays类中的方法都是静态方法，在使用的的时候可以直接使用类名进行调用；常用的功能：</p>
<ul>
<li>给数组赋值：通过fill方法；</li>
<li>对数组排序：通过sort方法，按升序；</li>
<li>比较数组：通过equals方法比较数组中元素值是否相等；</li>
<li>查找数组元素：通过binarySearch方法能对排好序的数组进行二分查找；</li>
</ul>
<p><strong>冒泡排序</strong></p>
<p><img src="http://qny.suixinya.top/HexoBlog/bubble.gif" alt></p>
<p>时间复杂度：O(n^2)</p>
<p>基础原理：遍历和交换</p>
<p>比较数组中两个相邻的元素，如果第一个数比第二个数大，我们就交换他们的位置。每比较一次，都会产生出一个最大的，或者最小的数，下一轮可以少一次排序，依次循环直到结束。</p>
<p>总比较轮数：数组长度-1</p>
<p>int[] myArray = {3,9,7,1,8};//升序<br>原数据：3    9    7    1    8    </p>
<p>第一轮：3     7    1    8    <strong>9</strong>    //得到最大值9             比较次数:  数组长度 - 1<br>第二轮：3    1    7     <strong>8    9</strong>    //得到较大值8             比较次数:  数组长度 - 2<br>第三轮：1    3    <strong>7     8    9</strong>    //得到较大值7             比较次数:  数组长度 - 3<br>第四轮：1    <strong>3    7     8    9</strong>    //得到最小值3             比较次数:  数组长度 - 4 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">bubbleSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] myArray = &#123;<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    Sort(myArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line">            System.out.print(myArray[i] + <span class="string">", "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] Sort(<span class="keyword">int</span>[] arr)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;<span class="comment">//比较的轮数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length- <span class="number">1</span> -i; j++) &#123;<span class="comment">//每轮各元素间比较</span></span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>稀疏数组</strong></p>
<p>当一个数组中大部分元素为0，或者为同一值时，可以使用稀疏数组来保存该数组。</p>
<p>系数数组的处理方式：</p>
<ul>
<li>记录数组一共有几行几列，有多少个不同值；</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个二维数组：11*11   0：没有棋子   1：黑棋    2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始数组</span></span><br><span class="line">        System.out.println(<span class="string">"输出原始数组："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array1)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转化为稀疏数组</span></span><br><span class="line">        <span class="comment">//获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"有效值的个数为："</span>+ sum);</span><br><span class="line">        <span class="comment">//创建一个稀疏数组对应的数组 (行列值)</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = array1.length;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = array1.length;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值，存放稀疏数组中</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">"\t"</span> + array2[i][<span class="number">1</span>] +<span class="string">"\t"</span>+array2[i][<span class="number">2</span>] +<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//还原，读取稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//给其中的元素还原他的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        System.out.println(<span class="string">"打印还原数组："</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : array3)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints)&#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输出原始数组：</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">2</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line">有效值的个数为：<span class="number">2</span></span><br><span class="line">稀疏数组</span><br><span class="line"><span class="number">11</span>	<span class="number">11</span>	<span class="number">2</span>	</span><br><span class="line"><span class="number">1</span>	<span class="number">2</span>	<span class="number">1</span>	</span><br><span class="line"><span class="number">2</span>	<span class="number">3</span>	<span class="number">2</span>	</span><br><span class="line">打印还原数组：</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">1</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">2</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	</span><br><span class="line"><span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span>	<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.mscto.com/java/409615.html" target="_blank" rel="noopener">稀疏数组</a></p>
<h4 id="十八、面向对象OOP"><a href="#十八、面向对象OOP" class="headerlink" title="十八、面向对象OOP"></a>十八、面向对象OOP</h4><table>
<thead>
<tr>
<th>名称</th>
<th>概念</th>
<th>特性</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>面向过程</td>
<td>面向过程是一种以过程为中心的<a href="https://www.2cto.com/kf" target="_blank" rel="noopener">编程</a>思想,它是一种基础的顺序的思维方式,面向对象方法的基础实现中也包含面向过程思想。</td>
<td>模块化  流程化</td>
<td>性能比面向对象高，因为类调用时需要实例化，开销比较大，比较消耗资源;比如单片机、嵌入式开发、<a href="https://www.2cto.com/os/linux/" target="_blank" rel="noopener">Linux</a>/Unix等一般采用面向过程开 发，性能是最重要的因素。</td>
<td>没有面向对象易维护、易复用、易扩展</td>
</tr>
<tr>
<td>面向对象</td>
<td>面向对象是按人们认识客观世界的<a href="https://www.2cto.com/os/" target="_blank" rel="noopener">系统</a>思维方式，采用基于对象（实体）的概念建立模型，模拟客观世界分析、设计、实现软件的办法。通过面向对象的理念使计算机软件系统能与现实世界中的系统一一对应。</td>
<td>抽象 封装 继承 多态</td>
<td>易维护、易复用、易扩展，由于面向对象有封装、继承、多态性的特性，可以设计出低耦合的系统，使系统更加灵活、更加易于维护</td>
<td>性能比面向过程低、</td>
</tr>
</tbody></table>
<p>面向对象编程的本质就是：以类的方式组织代码，以对象的形式封装（组织）数据；</p>
<p><strong>三大特性：封装、继承、多态</strong></p>
<h4 id="十九、构造器（构造方法）"><a href="#十九、构造器（构造方法）" class="headerlink" title="十九、构造器（构造方法）"></a>十九、构造器（构造方法）</h4><p>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</p>
<p>类中的构造器也叫构造方法，是在创建对象的时候必须要调用的，并且构造器有以下两个特点：</p>
<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回类型，也不能写void</li>
</ul>
<p>一旦定义了有参构造，无参构造必须显示定义；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span></span>&#123; <span class="comment">//方法重载</span></span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>idea快速生成构造器：Alt+Insert</p>
</blockquote>
<h4 id="二十、封装"><a href="#二十、封装" class="headerlink" title="二十、封装"></a>二十、封装</h4><p><strong>属性私有：get/set</strong></p>
<ol>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>提高系统的可维护性</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> gender;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="keyword">char</span> gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二十一、继承"><a href="#二十一、继承" class="headerlink" title="二十一、继承"></a>二十一、继承</h4><p>Java中只有单继承，没有多继承；</p>
<blockquote>
<p>Idea中使用 Ctrl+H,可以打开类继承关系：</p>
</blockquote>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828092306904.png" alt="image-20200828092306904"></p>
<p><strong>super注意点：</strong></p>
<ol>
<li>super调用父类的构造方法，必须在构造方法的第一个；</li>
<li>super必须只能在子类的方法或者构造方法中；</li>
<li>super和this不能同时调用构造方法；</li>
</ol>
<p><strong>super 和 this:</strong></p>
<ul>
<li><p>代表的对象不同：</p>
<p>this：本身调用者这个对象</p>
<p>super：代表父类对象的应用</p>
</li>
<li><p>前提</p>
<p>this：没有继承也可以用</p>
<p>super：只能在继承条件下才可以使用</p>
</li>
<li><p>构造方法</p>
<p>this()：本类的构造</p>
<p>super()：父类的构造</p>
</li>
</ul>
<p><strong>方法重写</strong></p>
<p>重写：需要有继承关系，子类重写父类方法；</p>
<blockquote>
<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大但不能缩小：public——&gt;protected——&gt;Default——&gt;private</li>
<li>抛出的异常：范围可以被缩小，但不能被扩大， ClassNotFoundException ——&gt; Exception</li>
</ol>
</blockquote>
<p>为什么需要重写？</p>
<blockquote>
<p>父类的功能：子类不一定需要或者不一定满足</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">"贰拾肆"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.suixin.oop01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"suixin"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name); <span class="comment">//随心</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name); <span class="comment">//suixin</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name); <span class="comment">//贰拾肆</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.suixin.oop01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test(<span class="string">"随心"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二十二、多态"><a href="#二十二、多态" class="headerlink" title="二十二、多态"></a>二十二、多态</h4><p>动态：即同一方法可以根据发送对象的不同而采用多种不同的行为方式，一个对象的实际类型时确定的，但是可以指向对象的引用的类型有很多；</p>
<p>动态存在的条件：</p>
<ul>
<li>有继承关系</li>
<li>子类重写父类的方法</li>
<li>父类引用指向子类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        Person stu2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object stu3 = <span class="keyword">new</span> Student();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二十三、static"><a href="#二十三、static" class="headerlink" title="二十三、static"></a>二十三、static</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//第二个执行，可以赋初始值</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第一个执行，只执行一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第三个执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo01 d = <span class="keyword">new</span> demo01();</span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line">        demo01 d2 = <span class="keyword">new</span> demo01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br><span class="line">=============</span><br><span class="line">匿名代码块</span><br><span class="line">构造方法</span><br></pre></td></tr></table></figure>

<p>静态导入包：<code>import static java.lang.Math.random;</code></p>
<h4 id="二十四、抽象类"><a href="#二十四、抽象类" class="headerlink" title="二十四、抽象类"></a>二十四、抽象类</h4><p>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽线方法，如果修饰类那该类就是抽象类；</p>
<p>抽象类中可以没有抽象方法，但是抽象方法的类一定要声明为抽象类；</p>
<p>抽象类不能使用new关键字来创建对象实例，它是用来让子类继承的。</p>
<p>抽象方法：只有方法的声明，没有方法的实现，它用来让子类实现。</p>
<p>子类继承抽象类，那么就必须要实现抽象类中没有实现的方法，否则该子类也要声明为抽象类。</p>
<h4 id="二十五、接口（interface）"><a href="#二十五、接口（interface）" class="headerlink" title="二十五、接口（interface）"></a>二十五、接口（interface）</h4><p><strong>接口可以多继承</strong></p>
<p>普通类：只有具体的实现</p>
<p>抽象类：具体的实现和规范（抽象方法）都有</p>
<p>接口：只有规范，约束和实现分离：面向接口编程；接口的本质就是契约</p>
<p>声明类的关键字用<code>class</code>,声明接口使用<code>interface</code>;</p>
<p>类实现接口使用<code>implement</code>,实现了接口的类就需要重写接口中的方法，多继承，利用接口是实现多继承；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.suixin.oop04;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoImpl</span> <span class="keyword">implements</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口的作用：</p>
<ul>
<li>约束</li>
<li>定义一些方法，让不同的人去使用</li>
<li>public abstract</li>
<li>public abstract final</li>
<li>接口不能实例化，接口中没有构造方法</li>
<li>implement可以实现多个接口</li>
<li>必须要重写接口中的方法</li>
</ul>
<h4 id="二十六、内部类"><a href="#二十六、内部类" class="headerlink" title="二十六、内部类"></a>二十六、内部类</h4><p>内部类就是在一个类的内部在定义一个类，比如：A类中定义一个B类，那么B类相对A类来说就成为内部类，而A类相对于B类来说就是外部类；</p>
<ol>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.suixin.oop04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过这个外部类来实例化内部类</span></span><br><span class="line">        Outer.Inner inner = outer.<span class="keyword">new</span> Inner();</span><br><span class="line">        inner.in();</span><br><span class="line">        inner.getID();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个Java类中可以有多个class类，但是只能有一个public class类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二十七、异常"><a href="#二十七、异常" class="headerlink" title="二十七、异常"></a>二十七、异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.suixin.oop04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"程序出现异常，除数不能为0,"</span>+ e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>finally可以不要finally，在io资源等时用来关闭资源；善后处理；</p>
<blockquote>
<p>快捷键： Ctrl+Alt+T</p>
</blockquote>
<p>主动抛出异常：<code>throw</code>、<code>throws</code></p>
<p>自定义异常</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200828123655106.png" alt="image-20200828123655106"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL复习</title>
    <url>/2020/09/04/MySQL%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>数据库就是存储数据的仓库，其本质是一个文件系统，数据按照特定的格式将数据存储起来，用户可以对数据库中的数据进行增加，修改，删除及查询操作。所有的关系型数据库都可以使用通用的SQL语句进行管理。</p>
</blockquote>
<table>
<thead>
<tr>
<th>储存位置</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>速度快</td>
<td>不能永久保存，数据临时状态</td>
</tr>
<tr>
<td>文件</td>
<td>数据可以永久保存</td>
<td>数据操作不方便，查询某个数据时</td>
</tr>
<tr>
<td>数据库</td>
<td>数据可以永久保存，查询数据快，对数据管理方便</td>
<td>占用资源，需要购买</td>
</tr>
</tbody></table>
<ul>
<li>MySQL：开源免费的数据库，小型的数据库，已经被Oracle收购了。MySQL6.x版本也开始收费。后来Sun公司收购了MySQL，而Sun公司又被Oracle收购。</li>
<li>Oracle：收费的大型数据库，Oracle公司的产品。</li>
<li>IBM公司的数据库产品,收费的。常应用在银行系统中。</li>
<li>SQLite: 嵌入式的小型数据库，应用在手机端，如：Android。</li>
</ul>
<a id="more"></a>

<h3 id="1、MySQL数据库服务的启动与登录"><a href="#1、MySQL数据库服务的启动与登录" class="headerlink" title="1、MySQL数据库服务的启动与登录"></a>1、MySQL数据库服务的启动与登录</h3><ol>
<li>DOS命令启动：</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>登录方式1</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql <span class="literal">-u</span>用户名 <span class="literal">-p</span>密码</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql <span class="literal">-u</span>用户名 <span class="literal">-p</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>登录格式2</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql <span class="literal">-hip</span>地址 <span class="literal">-u</span>用户名 <span class="literal">-p</span>密码</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>登录格式3</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql -<span class="literal">-host</span>=ip地址 -<span class="literal">-user</span>=用户名 -<span class="literal">-password</span>=密码</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>退出MySQL</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exit</span>或quit</span><br></pre></td></tr></table></figure>

<h3 id="2、SQL语句分类"><a href="#2、SQL语句分类" class="headerlink" title="2、SQL语句分类"></a>2、SQL语句分类</h3><ol>
<li><strong>DDL</strong>：Data Definition Language (DDL数据定义语言) 如：建库，建表</li>
<li><strong>DML</strong>：Data Manipulation Language(DML数据操纵语言)，如：对表中的记录操作增删改</li>
<li><strong>DQL</strong>：Data Query Language(DQL 数据查询语言)，如：对表中的查询操作</li>
<li><strong>DCL</strong>：Data Control Language(DCL 数据控制语言)，如：对用户权限的设置</li>
</ol>
<h3 id="3、DDL操作数据库"><a href="#3、DDL操作数据库" class="headerlink" title="3、DDL操作数据库"></a>3、DDL操作数据库</h3><h4 id="3-1-创建数据库"><a href="#3-1-创建数据库" class="headerlink" title="3.1 创建数据库"></a>3.1 创建数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库名; -- 创建数据库</span><br><span class="line">create database if not exists 数据库名; -- 判断数据库是否已经存在，不存在则创建数据库</span><br><span class="line">create database 数据库名 character set 字符集; -- 创建数据库并指定字符集</span><br></pre></td></tr></table></figure>

<h4 id="3-2-查看数据库"><a href="#3-2-查看数据库" class="headerlink" title="3.2 查看数据库"></a>3.2 查看数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases; -- 查看所有的数据库</span><br><span class="line">show create database 数据库名; -- 查看某个数据库的定义信息</span><br></pre></td></tr></table></figure>

<h4 id="3-3-修改数据库"><a href="#3-3-修改数据库" class="headerlink" title="3.3 修改数据库"></a>3.3 修改数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter database 数据库名 default character set 字符集; -- 修改数据库默认的字符集</span><br><span class="line">rename database 旧名 to 新名; -- 更改数据库名</span><br></pre></td></tr></table></figure>

<h4 id="3-4-删除数据库"><a href="#3-4-删除数据库" class="headerlink" title="3.4 删除数据库"></a>3.4 删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database 数据库名;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-使用数据库"><a href="#3-4-使用数据库" class="headerlink" title="3.4 使用数据库"></a>3.4 使用数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 数据库名; -- 使用切换数据库</span><br><span class="line">select database(); -- 查看正在使用的数据库</span><br></pre></td></tr></table></figure>

<h3 id="4、DDL操作表"><a href="#4、DDL操作表" class="headerlink" title="4、DDL操作表"></a>4、DDL操作表</h3><h4 id="4-1-创建表"><a href="#4-1-创建表" class="headerlink" title="4.1 创建表"></a>4.1 创建表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名 (</span><br><span class="line">    字段1 字段1数据类型,</span><br><span class="line">    字段2 字段2数据类型</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>常用的数据类型：int、double、varchar、date</p>
</blockquote>
<h4 id="4-2-查看表"><a href="#4-2-查看表" class="headerlink" title="4.2 查看表"></a>4.2 查看表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables; -- 查看数据库中所有的表</span><br><span class="line">desc 表名; -- 查看表结构</span><br><span class="line">show create table 表名; -- 查看创建表的sql语句</span><br></pre></td></tr></table></figure>

<h4 id="4-3-快速创建一个表格结构相同的表"><a href="#4-3-快速创建一个表格结构相同的表" class="headerlink" title="4.3 快速创建一个表格结构相同的表"></a>4.3 快速创建一个表格结构相同的表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 新表名 like 旧表名;</span><br></pre></td></tr></table></figure>

<h4 id="4-4-删除表"><a href="#4-4-删除表" class="headerlink" title="4.4 删除表"></a>4.4 删除表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table 表名; -- 直接删除</span><br><span class="line">drop table if exists 表名; -- 判断表是否存在，如果存在则删除</span><br></pre></td></tr></table></figure>

<h4 id="4-5-修改表结构"><a href="#4-5-修改表结构" class="headerlink" title="4.5 修改表结构"></a>4.5 修改表结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 add 列名 类型; -- 添加列名</span><br><span class="line">alter table 表名 modify 列名 新类型; -- 修改列类型</span><br><span class="line">alter table 表名 change 旧列名 新列名 类型; -- 修改列名</span><br><span class="line">alter table 表名 drop 列名; -- 删除列；</span><br></pre></td></tr></table></figure>

<h4 id="4-6-修改表名"><a href="#4-6-修改表名" class="headerlink" title="4.6 修改表名"></a>4.6 修改表名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename table 旧表名 to 新表名;</span><br></pre></td></tr></table></figure>

<h4 id="4-7-修改字符集"><a href="#4-7-修改字符集" class="headerlink" title="4.7 修改字符集"></a>4.7 修改字符集</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 character set 字符集;</span><br></pre></td></tr></table></figure>

<h3 id="5、DML操作表中数据"><a href="#5、DML操作表中数据" class="headerlink" title="5、DML操作表中数据"></a>5、DML操作表中数据</h3><h4 id="5-1-插入记录"><a href="#5-1-插入记录" class="headerlink" title="5.1 插入记录"></a>5.1 插入记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert [into] 表名</span><br><span class="line">(字段名1,字段名2,...)</span><br><span class="line">values (字段值1,字段值2,...);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert [into] 表名 (字段名1,字段名2,...) values (字段值1,字段值2,...); -- 插入全部字段</span><br><span class="line">insert into 表名 values (值1,值2,...); -- 不写字段名</span><br><span class="line">insert into 表名 (字段1,字段2) values (值1,值2); -- 插入部分数据，没有添加数据的字段会使用null</span><br></pre></td></tr></table></figure>

<blockquote>
<p>insert的注意事项：</p>
<p>1) 插入的数据应与字段的数据类型相同。<br>2) 数据的大小应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40的列中。<br>3) 在values中列出的数据位置必须与被加入的列的排列位置相对应。在mysql中可以使用value，但不建议使用，功能与values相同。<br>4) 字符和日期型数据应包含在单引号中。MySQL中也可以使用双引号做为分隔符。<br>5) 不指定列或使用null，表示插入空值。</p>
</blockquote>
<h4 id="5-2-查看MySQL内部设置的编码"><a href="#5-2-查看MySQL内部设置的编码" class="headerlink" title="5.2 查看MySQL内部设置的编码"></a>5.2 查看MySQL内部设置的编码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show variables like &quot;character%&quot;; -- 查看包含character开头的全局变量</span><br></pre></td></tr></table></figure>

<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905110653190.png" alt></p>
<blockquote>
<p>解决DOS乱码问题：修改client、connection、results的编码为GBK，保证和DOS命令行编码保持一致</p>
</blockquote>
<p>单独设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set character_set_client&#x3D;gbk; -- 修改客户端的字符集为GBK</span><br><span class="line">set character_set_connection&#x3D;gbk; -- 修改连接的字符集为GBK</span><br><span class="line">set character_set_results&#x3D;gbk; -- 修改查询的结果字符集为GBK</span><br></pre></td></tr></table></figure>
<p>同时设置三项：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set names gbk;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：退出DOS命令行就失效了，需要每次都配置</p>
</blockquote>
<h4 id="5-3-蠕虫复制"><a href="#5-3-蠕虫复制" class="headerlink" title="5.3 蠕虫复制"></a>5.3 蠕虫复制</h4><blockquote>
<p>蠕虫复制：将一张已经存在的表中的数据复制到另一张表中；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into 表名1 select * from 表名2; -- 将表名2中的所有的列复制到表名1中</span><br><span class="line">insert into 表名1(列1,列2) select 列1,列2 from 表名2; -- 只复制部分列</span><br></pre></td></tr></table></figure>

<h4 id="5-4-更新表记录"><a href="#5-4-更新表记录" class="headerlink" title="5.4 更新表记录"></a>5.4 更新表记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 列名&#x3D;值 [where 条件表达式];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名&#x3D;值; -- 修改所有的行</span><br><span class="line">update 表名 set 字段名&#x3D;值 where 字段名&#x3D;值; -- 带条件修改数据</span><br></pre></td></tr></table></figure>

<h4 id="5-5-删除表记录"><a href="#5-5-删除表记录" class="headerlink" title="5.5 删除表记录"></a>5.5 删除表记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名 [where 条件表达式]; -- 没有指定where子句，表中所有的记录都将被删除；</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from 表名; -- 不带条件删除数据,删除表中所有的数据</span><br><span class="line">delete from 表名 where 字段名&#x3D;值;</span><br><span class="line">truncate table 表名; -- 使用truncate删除表中所有记录</span><br></pre></td></tr></table></figure>

<h3 id="6、DQL查询表中数据"><a href="#6、DQL查询表中数据" class="headerlink" title="6、DQL查询表中数据"></a>6、DQL查询表中数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名 from 表名 [where 条件表达式];</span><br></pre></td></tr></table></figure>

<h4 id="6-1-简单查询"><a href="#6-1-简单查询" class="headerlink" title="6.1 简单查询"></a>6.1 简单查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表名; -- 查询所有列</span><br><span class="line">select 字段名1,字段名2,... from 表名; -- 查询指定列的数据，多个列之间以逗号分隔</span><br><span class="line">select 字段名1 as 别名, 字段2 as 别名... from 表名; -- 对列指定别名</span><br><span class="line">select 字段名1 as 别名, 字段2 as 别名... from 表名 as 表别名; -- 对和表同时指定别名</span><br></pre></td></tr></table></figure>

<h4 id="6-2-清除重复值"><a href="#6-2-清除重复值" class="headerlink" title="6.2 清除重复值"></a>6.2 清除重复值</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct 字段名 from 表名; -- 查询指定列并且不出现重复数据，去掉重复记录</span><br></pre></td></tr></table></figure>

<h4 id="6-3-查询结果参与计算"><a href="#6-3-查询结果参与计算" class="headerlink" title="6.3 查询结果参与计算"></a>6.3 查询结果参与计算</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 列名1+固定值 from 表名; -- 某列数据和固定值运算</span><br><span class="line">select 列名1+列名2 from 表名; -- 某列数据和其他数据参与运算</span><br></pre></td></tr></table></figure>

<h4 id="6-4-条件查询"><a href="#6-4-条件查询" class="headerlink" title="6.4 条件查询"></a>6.4 条件查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 表名 where 条件;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>比较运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&gt;、 &lt;、 &lt;=、 &gt;=、 =、 &lt;&gt;</td>
<td>&lt;&gt;在sql中表示不等于，在mysql中也可以使用 !=</td>
</tr>
<tr>
<td>between… and…</td>
<td>在一个范围之内</td>
</tr>
<tr>
<td>in()</td>
<td>在集合中，集合表示多个值，使用逗号分隔</td>
</tr>
<tr>
<td>like</td>
<td>模糊查询</td>
</tr>
<tr>
<td>is null</td>
<td>查询某一列为null的值，不能写=null</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>逻辑运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>and 或者 &amp;&amp;</td>
<td>与，SQL中建议使用and，&amp;&amp;不通用</td>
</tr>
<tr>
<td>or 或者 ||</td>
<td>或</td>
</tr>
<tr>
<td>not 或者 ！</td>
<td>非</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from 表名 where 字段 in (数据1,数据2,...); </span><br><span class="line">select * from 表名 where 字段 between 值1 and 值2;</span><br><span class="line">select * from 表名 where 字段 like &quot;通配符字符串&quot;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>通配符</th>
<th>声明</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>匹配任意多个字符串</td>
</tr>
<tr>
<td>_</td>
<td>匹配一个字符</td>
</tr>
</tbody></table>
<h3 id="7、DQL查询语句"><a href="#7、DQL查询语句" class="headerlink" title="7、DQL查询语句"></a>7、DQL查询语句</h3><h4 id="7-1-排序-order-by"><a href="#7-1-排序-order-by" class="headerlink" title="7.1 排序 order by"></a>7.1 排序 <code>order by</code></h4><p>通过ORDER BY子句，可以将查询出的结果进行排序，排序只是显示方式，不会影响数据库中数据的顺序)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 表名 where 字段&#x3D;值 order by 字段名 [ASC|DESC]; -- ASC：升序（默认）DESC：降序</span><br><span class="line"></span><br><span class="line">select * from student order by age desc; -- 查询所有数据,使用年龄降序排序</span><br><span class="line"></span><br><span class="line">SELECT 字段名 FROM 表名 WHERE 字段&#x3D;值 ORDER BY 字段名1 [ASC|DESC], 字段名2 [ASC|DESC]; -- 组合排序，如果第1个字段相等，则按第2个字段排序，依次类推。</span><br><span class="line"></span><br><span class="line">select * from student order by age desc, math asc; -- 查询所有数据,在年龄降序排序的基础上，如果年龄相同再以数学成绩升序排序</span><br></pre></td></tr></table></figure>

<h4 id="7-2-聚合函数（会忽略空值null）"><a href="#7-2-聚合函数（会忽略空值null）" class="headerlink" title="7.2 聚合函数（会忽略空值null）"></a>7.2 聚合函数（会忽略空值null）</h4><table>
<thead>
<tr>
<th>SQL中的聚合函数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>max(列名)</td>
<td>求这一列的最大值</td>
</tr>
<tr>
<td>min(列名)</td>
<td>求这一列的最小值</td>
</tr>
<tr>
<td>avg(列名)</td>
<td>求这一列的平均数</td>
</tr>
<tr>
<td>count(列名)</td>
<td>求者一列有多少记录</td>
</tr>
<tr>
<td>sum(列名)</td>
<td>对这一列求总合</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 聚合函数(列名) from 表名;</span><br><span class="line">select count(id) as 总人数 from student; -- 查询学生总人数(**会忽略null值**)</span><br><span class="line"></span><br><span class="line">select ifnull(列名，默认值) from 表名; -- 如果列名不为空，返回这列的值。如果为NULL，则返回默认值。</span><br><span class="line">select ifnull(id,0) from student; -- 查询id字段，如果为null，则使用0代替</span><br><span class="line">select count(ifnull(id,0)) from student; -- 我们可以利用IFNULL()函数，如果记录为NULL，给个默认值，这样统计的数据就不会遗漏</span><br></pre></td></tr></table></figure>

<h4 id="7-3-分组"><a href="#7-3-分组" class="headerlink" title="7.3 分组"></a>7.3 分组</h4><p>分组查询是指使用 GROUP BY语句对查询信息进行分组，相同数据作为一组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段1,字段2,... from 表名 group by 分组字段 [having 条件];</span><br></pre></td></tr></table></figure>

<p>GROUP BY将分组字段结果中相同内容作为一组，并且返回每组的第一条数据，所以单独分组没什么用处。分组的目的就是为了统计，一般分组会跟聚合函数一起使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select sex, avg(math) from student3 group by sex; -- 按性别进行分组，求男生和女生数学的平均分</span><br><span class="line"></span><br><span class="line">SELECT sex, COUNT(*) FROM student3 WHERE age &gt; 25 GROUP BY sex having COUNT(*) &gt;2; -- 对分组查询的结果再进行过滤</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>子句</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>where子句</td>
<td>1、对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，即先过滤再分组。2、where后面不可以使用聚合函数</td>
</tr>
<tr>
<td>having子句</td>
<td>1、having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，即先分组再过滤。2、having后面可以使用聚合函数</td>
</tr>
</tbody></table>
<h4 id="7-4-limit语句"><a href="#7-4-limit语句" class="headerlink" title="7.4 limit语句"></a>7.4 limit语句</h4><p>LIMIT是限制的意思，所以LIMIT的作用就是限制查询记录的条数。<strong>用于分页</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT *|字段列表 [as 别名] FROM 表名 [WHERE子句] [GROUP BY子句][HAVING子句][ORDER BY子句][LIMIT子句];</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit offset,length; -- offset:起始行数，从0开始计数，如果省略，默认就是0</span><br><span class="line">					 -- 返回的行数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from student limit 5; -- 如果第一个参数是0可以省略不写</span><br></pre></td></tr></table></figure>

<h3 id="8、数据库备份"><a href="#8、数据库备份" class="headerlink" title="8、数据库备份"></a>8、数据库备份</h3><p>在服务器进行数据传输、数据存储和数据交换，就有可能产生数据故障。比如发生意外停机或存储介质损坏。这时，如果没有采取数据备份和数据恢复手段与措施，就会导致数据的丢失，造成的损失是无法弥补与估量的。</p>
<h4 id="8-1-备份：DOS下，未登录的时候。这是一个可执行文件exe，在bin文件夹"><a href="#8-1-备份：DOS下，未登录的时候。这是一个可执行文件exe，在bin文件夹" class="headerlink" title="8.1 备份：DOS下，未登录的时候。这是一个可执行文件exe，在bin文件夹"></a>8.1 备份：DOS下，未登录的时候。这是一个可执行文件exe，在bin文件夹</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysqldump <span class="literal">-u</span>用户名 <span class="literal">-p</span>密码 数据库 &gt; 文件路径</span><br></pre></td></tr></table></figure>

<h4 id="8-2-还原：mysql中的命令，需要登录后才可以操作"><a href="#8-2-还原：mysql中的命令，需要登录后才可以操作" class="headerlink" title="8.2  还原：mysql中的命令，需要登录后才可以操作"></a>8.2  还原：mysql中的命令，需要登录后才可以操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use 数据库;</span><br><span class="line">source 导入文件的路径;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 备份stu数据库中的数据到d:\stu.sql文件中</span><br><span class="line">mysqldump -uroot -proot stu &gt; d:&#x2F;stu.sql</span><br><span class="line"></span><br><span class="line">use stu;</span><br><span class="line">source d:&#x2F;stu.sql; -- 还原stu数据库中的数据，注意：还原的时候需要先登录MySQL,并选中对应的数据库。</span><br></pre></td></tr></table></figure>

<h3 id="9、数据库表的约束"><a href="#9、数据库表的约束" class="headerlink" title="9、数据库表的约束"></a>9、数据库表的约束</h3><p>对表中的数据进行限制，保证数据的正确性、有效性和完整性。一个表如果添加了约束，不正确的数据将无法插入到表中。约束在创建表的时候添加比较合适。</p>
<table>
<thead>
<tr>
<th>约束名</th>
<th>约束关键字</th>
</tr>
</thead>
<tbody><tr>
<td>主键</td>
<td>primary key</td>
</tr>
<tr>
<td>唯一</td>
<td>unique</td>
</tr>
<tr>
<td>非空</td>
<td>not null</td>
</tr>
<tr>
<td>外键</td>
<td>foreign key</td>
</tr>
<tr>
<td>检查约束</td>
<td>check 注：mysql不支持</td>
</tr>
</tbody></table>
<h4 id="9-1-主键约束"><a href="#9-1-主键约束" class="headerlink" title="9.1 主键约束"></a>9.1 主键约束</h4><p>用来唯一标识数据库中的每一条记录，通常不用业务字段作为主键，单独给每张表设计一个id的字段，把id作为主键。主键是给数据库和程序使用的，不是给最终的客户使用的。所以主键有没有含义也没有关系，只要不重复，非空就行。</p>
<p><strong>主键的特点：非空、唯一</strong></p>
<ol>
<li>在创建表的时候给字段添加主键</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 PRIMARY KEY</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表学生表st5, 包含字段(id, name, age)将id做为主键</span><br><span class="line">create table st5 (</span><br><span class="line">id int primary key, -- id为主键</span><br><span class="line">name varchar(20),</span><br><span class="line">age int</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在已有表中添加主键</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD PRIMARY KEY(字段名);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>删除添加主键</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table st5 drop primary key; -- 删除st5表的主键</span><br><span class="line">alter table st5 add primary key(id); -- 添加主键</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>主键自增，主键如果让我们自己添加很有可能重复,我们通常希望在每次插入新记录时,数据库自动生成主键字段的值</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto_increment -- 表示自动增长（字段类型必须是整数类型）</span><br></pre></td></tr></table></figure>

<ul>
<li>默认地AUTO_INCREMENT 的开始值是1，如果希望修改起始值,请使用下列SQL语法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名 int primary key auto_increment</span><br><span class="line">)auto_increment&#x3D;起始值;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 指定起始值为1000</span><br><span class="line">create table st4 (</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(20)</span><br><span class="line">) auto_increment &#x3D; 1000;</span><br><span class="line"></span><br><span class="line">insert into st4 values (null, &#39;孔明&#39;);</span><br><span class="line"></span><br><span class="line">select * from st4;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建好以后修改起始值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 表名 auto_increment&#x3D;起始值;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table st4 auto_increment&#x3D;200;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>DELETE和TRUNCATE对自增长的影响<ul>
<li>DELETE：删除所有的记录之后，自增长没有影响。</li>
<li>TRUNCATE：删除以后，自增长又重新开始。</li>
</ul>
</li>
</ol>
<h4 id="9-2-唯一约束"><a href="#9-2-唯一约束" class="headerlink" title="9.2 唯一约束"></a>9.2 唯一约束</h4><p>表中某一列不能出现重复的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 unique;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建学生表st7, 包含字段(id, name),name这一列设置唯一约束,不能出现同名的学生</span><br><span class="line">create table st7 (</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(20) unique</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h4 id="9-3-非空约束"><a href="#9-3-非空约束" class="headerlink" title="9.3 非空约束"></a>9.3 非空约束</h4><p>某一列不能为null。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 not null;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建表学生表st8, 包含字段(id,name,gender)其中name不能为NULL</span><br><span class="line">create table st8 (</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(20) not null,</span><br><span class="line">	gender char(1)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ul>
<li>默认值</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字段名 字段类型 default 默认值;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建一个学生表 st9，包含字段(id,name,address)， 地址默认值是广州</span><br><span class="line">create table st9 (</span><br><span class="line">	id int,</span><br><span class="line">	name varchar(20),</span><br><span class="line">	address varchar(20) default &#39;广州&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><strong>如果一个字段设置了非空与唯一约束，该字段与主键的区别?</strong></p>
<ol>
<li>主键数在一个表中，只能有一个。不能出现多个主键。主键可以单列，也可以是多列。</li>
<li>自增长只能用在主键上</li>
</ol>
<h4 id="9-4-外键约束"><a href="#9-4-外键约束" class="headerlink" title="9.4 外键约束"></a>9.4 外键约束</h4><p>在从表中与主表主键对应的那一列，如：员工表中的dep_id;</p>
<p>主表： 一方，用来约束别人的表</p>
<p>从表： 多方，被别人约束的表</p>
<ol>
<li>创建约束</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[constraint][外键约束名称] foreign key(外键字段名) references 主表名(外键字段) -- 创建表时添加字段</span><br><span class="line">alter table 从表 add [constraint][外键约束名称] foreign key (外键字段名) references 主表（主键字段名）; -- 已有表增加外键</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 创建从表 employee 并添加外键约束emp_depid_fk</span><br><span class="line">-- 多方，从表</span><br><span class="line">create table employee(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(20),</span><br><span class="line">	age int,</span><br><span class="line">	dep_id int, -- 外键对应主表的主键</span><br><span class="line">	-- 创建外键约束</span><br><span class="line">	constraint emp_depid_fk foreign key (dep_id) references department(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>删除外键</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table 从表 drop foreign key 外键名称;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除employee表的emp_depid_fk外键</span><br><span class="line">alter table employee drop foreign key emp_depid_fk;</span><br><span class="line"></span><br><span class="line">-- 在employee表情存在的情况下添加外键</span><br><span class="line">alter table employee add constraint emp_depid_fk foreign key (dep_id) references department(id);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>外键的级联；在修改和删除主表的主键时，同时更新或删除副表的外键值，称为级联操作</li>
</ol>
<table>
<thead>
<tr>
<th>联级操作语法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>on update cascade</td>
<td>级联更新，只能是创建表的时候创建级联关系。更新主表中的主键，从表中的外键列也自动同步更新</td>
</tr>
<tr>
<td>on delete cascade</td>
<td>级联删除</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 删除employee表，重新创建employee表，添加级联更新和级联删除</span><br><span class="line">drop table employee;</span><br><span class="line">create table employee(</span><br><span class="line">	id int primary key auto_increment,</span><br><span class="line">	name varchar(20),</span><br><span class="line">	age int,</span><br><span class="line">	dep_id int, -- 外键对应主表的主键</span><br><span class="line">-- 创建外键约束</span><br><span class="line">	constraint emp_depid_fk foreign key (dep_id) references department(id) on update cascade on delete cascade</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">-- 再次添加数据到员工表和部门表</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;张三&#39;, 20, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;李四&#39;, 21, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;王五&#39;, 20, 1);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;老王&#39;, 20, 2);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;大王&#39;, 22, 2);</span><br><span class="line">INSERT INTO employee (NAME, age, dep_id) VALUES (&#39;小王&#39;, 18, 2);</span><br><span class="line"></span><br><span class="line">-- 删除部门表？能不能直接删除？</span><br><span class="line">drop table department;</span><br><span class="line"></span><br><span class="line">-- 把部门表中id等于1的部门改成id等于10</span><br><span class="line">update department set id&#x3D;10 where id&#x3D;1;</span><br><span class="line">select * from employee;</span><br><span class="line">select * from department;</span><br><span class="line"></span><br><span class="line">-- 删除部门号是2的部门</span><br><span class="line">delete from department where id&#x3D;2;</span><br></pre></td></tr></table></figure>

<h3 id="10、表与表之间的关系"><a href="#10、表与表之间的关系" class="headerlink" title="10、表与表之间的关系"></a>10、表与表之间的关系</h3><p>表与表之间的三种关系：</p>
<ul>
<li>一对多：最常用的关系 部门和员工</li>
<li>多对多：学生选课表 和 学生表， 一门课程可以有多个学生选择，一个学生选择多门课程</li>
<li>一对一：相对使用比较少。员工表 简历表， 公民表 护照表</li>
</ul>
<ol>
<li>一对一（1:1） 在实际的开发中应用不多.因为一对一可以创建成一张表。</li>
<li>一对多（1:n） 例如：班级和学生，部门和员工，客户和订单，分类和商品；<br>一对多建表原则: 在从表(多方)创建一个字段,字段作为外键指向主表(一方)的主键</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905144348725.png" alt></p>
<ol start="3">
<li>多对多（m:n） 例如：老师和学生，学生和课程，用户和角色<br>多对多关系建表原则: 需要创建第三张表，中间表中至少两个字段，这两个字段分别作为外键指向各自一方的主键。</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905144405174.png" alt></p>
<h3 id="11、数据库设计"><a href="#11、数据库设计" class="headerlink" title="11、数据库设计"></a>11、数据库设计</h3><p>好的数据库设计对数据的存储性能和后期的程序开发，都会产生重要的影响。建立科学的，规范的数据库就需要满足一些规则来优化数据的设计和存储，这些规则就称为范式。</p>
<p>目前关系数据库有六种范式：第一范式（1NF）、第二范式（2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美范式）。<br>满足最低要求的范式是第一范式（1NF）。在第一范式的基础上进一步满足更多规范要求的称为第二范式（2NF），其余范式以次类推。一般说来，数据库只需满足第三范式(3NF）就行了。</p>
<h4 id="11-1-1NF"><a href="#11-1-1NF" class="headerlink" title="11.1 1NF"></a>11.1 1NF</h4><p>数据库表的每一列都是不可分割的原子数据项，不能是集合、数组等非原子数据项。即表中的某个列有多个值时，必须拆分为不同的列。简而言之，第一范式每一列不可再拆分，称为原子性。</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905170102283.png" alt="不满足第一范式"></p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905170150710.png" alt="满足第一范式"></p>
<blockquote>
<p>存在的问题：</p>
<ol>
<li>存在非常严重的数据冗余；</li>
<li>数据添加存在问题；</li>
<li>数据删除存在问题；</li>
</ol>
</blockquote>
<h4 id="11-2-2NF"><a href="#11-2-2NF" class="headerlink" title="11.2 2NF"></a>11.2 2NF</h4><p>在满足第一范式的前提下，表中的每一个字段都完全依赖于主键。<br>所谓完全依赖是指不能存在仅依赖主键一部分的列。简而言之，<strong>第二范式就是在第一范式的基础上所有列完全依赖于主键列</strong>。当存在一个复合主键包含多个主键列的时候，才会发生不符合第二范式的情况。比如有一个主键有两个列，不能存在这样的属性，它只依赖于其中一个列，这就是不符合第二范式。</p>
<ol>
<li><p>函数依赖：A ——&gt;B,如果通过A属性（属性组）的值，可以确定唯一B属性的值，则称B依赖于A；</p>
<p>例如: 学号——&gt; 姓名                （学号，课程号）——&gt; 分数</p>
</li>
<li><p>完全函数依赖：A——&gt; B，如果A是一个属性组，则B属性的确定需要依赖A属性组中所有的属性值；</p>
<p>例如: （学号，课程号） ——&gt; 分数</p>
</li>
<li><p>部分函数依赖：A —— &gt; B，如果A是一个属性组，则B属性的确定只需要依赖于A属性组中某一些值即可；</p>
<p>例如：（学号，课程名称） ——&gt; 姓名</p>
</li>
<li><p>传递函数依赖：A ——&gt; B，B——&gt; C，如果通过A属性（属性组）的值，可以确定唯一B属性的值，再通过B属性（属性组）的值可以确定唯一C属性的值，则称C传递函数依赖于A；</p>
<p>例如：学号 ——&gt; 系名 ， 系名 ——&gt; 系主任</p>
</li>
<li><p>码：如果再一张表中，一个属性或熟悉组，被其他所有属性所完全依赖，则称这个属性（属性组）为该表的码；</p>
<p>例如：该上表中码为：（学号，课程号）</p>
<p>主属性：码属性组中的所有属性；</p>
<p>非主属性：除码属性组的属性；</p>
</li>
</ol>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905170705991.png" alt="满足第二范式"></p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905170747411.png" alt></p>
<p><strong>第二范式的特点：</strong></p>
<ul>
<li>一张表只描述一件事情。</li>
<li>表中的每一列都完全依赖于主键</li>
</ul>
<p>示例：</p>
<blockquote>
<p>存在的问题：</p>
<ol>
<li>数据添加存在问题；</li>
<li>数据删除存在问题；</li>
</ol>
</blockquote>
<h4 id="11-3-3NF"><a href="#11-3-3NF" class="headerlink" title="11. 3 3NF"></a>11. 3 3NF</h4><p>在满足第二范式的前提下，表中的每一列都直接依赖于主键，而不是通过其它的列来间接依赖于主键。<br>简而言之，第三范式就是所有列不依赖于其它非主键列，也就是在满足2NF的基础上，<strong>任何非主列不得传递依赖于主键</strong>。所谓传递依赖，指的是如果存在”A → B → C”的决定关系，则C传递依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系：主键列 → 非主键列x → 非主键列y</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905170938370.png" alt="第三范式"></p>
<p><strong>总结：</strong></p>
<p>1NF：原子性：表中每列不可再拆分。</p>
<p>2NF：不产生局部依赖，一张表只描述一件事。</p>
<p>3NF：不产生传递依赖，表中每一列都直接依赖于主键。而不是通过其他列间接依赖于主键。</p>
<h3 id="12、表连接查询"><a href="#12、表连接查询" class="headerlink" title="12、表连接查询"></a>12、表连接查询</h3><p><img src="http://qny.suixinya.top/HexoBlog/image-20200905150846077.png" alt></p>
<p>笛卡尔积现象：左边表的每条数据和右边表的每条数据结合，如：左表两条记录，右表三条记录，查询得到的结果为：2*3=6条记录，这6条数据组合并不全部有用。所以需要清除笛卡尔效应；</p>
<h4 id="12-1-内连接"><a href="#12-1-内连接" class="headerlink" title="12.1 内连接"></a>12.1 内连接</h4><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示。如：从表.外键=主表.主键</p>
<h5 id="12-1-1-隐式内连接：看不到JOIN关键字，条件使用WHERE指定"><a href="#12-1-1-隐式内连接：看不到JOIN关键字，条件使用WHERE指定" class="headerlink" title="12.1.1 隐式内连接：看不到JOIN关键字，条件使用WHERE指定"></a>12.1.1 隐式内连接：看不到JOIN关键字，条件使用WHERE指定</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 左表，右表 where 条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from emp,dept where emp.&quot;dept_id&quot; &#x3D; dept.&quot;id&quot;;</span><br></pre></td></tr></table></figure>
<h5 id="12-1-2-显示内连接：使用INNER-JOIN-…-ON语句-可以省略INNER"><a href="#12-1-2-显示内连接：使用INNER-JOIN-…-ON语句-可以省略INNER" class="headerlink" title="12.1.2 显示内连接：使用INNER JOIN … ON语句, 可以省略INNER"></a>12.1.2 显示内连接：使用INNER JOIN … ON语句, 可以省略INNER</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 左表 [inner] join 右表 on 条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.<span class="string">`id`</span> 编号,e.<span class="string">`name`</span> 姓名,e.<span class="string">`gender`</span> 性别,e.<span class="string">`salary`</span> 工资,d.<span class="string">`name`</span> 部门名字 <span class="keyword">from</span> emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.<span class="string">`dept_id`</span> = d.<span class="string">`id`</span> <span class="keyword">where</span> e.<span class="string">`name`</span>=<span class="string">'唐僧'</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结内连接查询步骤：</p>
<ol>
<li>确定查询哪些表</li>
<li>确定表连接的条件</li>
<li>确定查询的条件</li>
<li>确定查询的字段</li>
</ol>
</blockquote>
<h4 id="12-2-外连接"><a href="#12-2-外连接" class="headerlink" title="12.2 外连接"></a>12.2 外连接</h4><h5 id="12-2-1-左外连接：使用LEFT-OUTER-JOIN-…-ON，OUTER可以省略"><a href="#12-2-1-左外连接：使用LEFT-OUTER-JOIN-…-ON，OUTER可以省略" class="headerlink" title="12.2.1 左外连接：使用LEFT OUTER JOIN … ON，OUTER可以省略"></a>12.2.1 左外连接：使用LEFT OUTER JOIN … ON，OUTER可以省略</h5><p>用左边表的记录去匹配右边表的记录，如果符合条件的则显示；否则，显示NULL<br>可以理解为：在内连接的基础上保证左表的数据全部显示；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 左表 left [outer] join 右表条件</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在部门表中增加一个销售部</span><br><span class="line">insert into dept (name) values (&#39;销售部&#39;);</span><br><span class="line">select * from dept;</span><br><span class="line">-- 使用内连接查询</span><br><span class="line">select * from dept d inner join emp e on d.&#96;id&#96; &#x3D; e.&#96;dept_id&#96;;</span><br><span class="line">-- 使用左外连接查询</span><br><span class="line">select * from dept d left join emp e on d.&#96;id&#96; &#x3D; e.&#96;dept_id&#96;;</span><br></pre></td></tr></table></figure>

<h5 id="12-2-2-右外连接：使用RIGHT-OUTER-JOIN-…-ON，OUTER可以省略"><a href="#12-2-2-右外连接：使用RIGHT-OUTER-JOIN-…-ON，OUTER可以省略" class="headerlink" title="12.2.2 右外连接：使用RIGHT OUTER JOIN … ON，OUTER可以省略"></a>12.2.2 右外连接：使用RIGHT OUTER JOIN … ON，OUTER可以省略</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 字段名 from 左表 right [outer] join 右表 on 条件;</span><br></pre></td></tr></table></figure>

<p>用右边表的记录去匹配左边表的记录，如果符合条件的则显示；否则，显示NULL<br>可以理解为：在内连接的基础上保证右表的数据全部显示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 在员工表中增加一个员工</span><br><span class="line">insert into emp values (null, &#39;沙僧&#39;,&#39;男&#39;,6666,&#39;2013-12-05&#39;,null);</span><br><span class="line">select * from emp;</span><br><span class="line">-- 使用内连接查询</span><br><span class="line">select * from dept inner join emp on dept.&#96;id&#96; &#x3D; emp.&#96;dept_id&#96;;</span><br><span class="line">-- 使用右外连接查询</span><br><span class="line">select * from dept right join emp on dept.&#96;id&#96; &#x3D; emp.&#96;dept_id&#96;;</span><br></pre></td></tr></table></figure>

<h3 id="13、子查询"><a href="#13、子查询" class="headerlink" title="13、子查询"></a>13、子查询</h3><p>一个查询的结果做为另一个查询的条件，有查询的嵌套，内部的查询称为子查询,子查询要使用括号</p>
<h4 id="13-1-子查询的结果是一个值的时候"><a href="#13-1-子查询的结果是一个值的时候" class="headerlink" title="13.1 子查询的结果是一个值的时候"></a>13.1 子查询的结果是一个值的时候</h4><p>子查询结果只要是单行单列，肯定在WHERE后面作为条件，父查询使用：比较运算符，如：&gt; 、&lt;、&lt;&gt;、= 等；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询字段 from 表 where 字段&#x3D;(子查询);</span><br></pre></td></tr></table></figure>
<p>查询工资最高的员工是谁？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 1) 查询最高工资是多少</span><br><span class="line">select max(salary) from emp;</span><br><span class="line">-- 2) 根据最高工资到员工表查询到对应的员工信息</span><br><span class="line">select * from emp where salary &#x3D; (select max(salary) from emp);</span><br></pre></td></tr></table></figure>

<h4 id="13-2-子查询结果是多行单列的时候"><a href="#13-2-子查询结果是多行单列的时候" class="headerlink" title="13.2 子查询结果是多行单列的时候"></a>13.2 子查询结果是多行单列的时候</h4><p>子查询结果是单例多行，结果集类似于一个数组，父查询使用IN运算符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">selcet 查询字段 from 表 where 字段 in (子查询);</span><br></pre></td></tr></table></figure>
<p>查询工资大于5000的员工，来自于哪些部门的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 先查询大于5000的员工所在的部门id</span><br><span class="line">select dept_id from emp where salary &gt; 5000;</span><br><span class="line">-- 再查询在这些部门id中部门的名字 Subquery returns more than 1 row</span><br><span class="line">select name from dept where id &#x3D; (select dept_id from emp where salary &gt; 5000);</span><br><span class="line">select name from dept where id in (select dept_id from emp where salary &gt; 5000);</span><br></pre></td></tr></table></figure>

<h4 id="13-3-子查询的结果是多行多列"><a href="#13-3-子查询的结果是多行多列" class="headerlink" title="13.3 子查询的结果是多行多列"></a>13.3 子查询的结果是多行多列</h4><p>子查询结果只要是多列，肯定在FROM后面作为表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select 查询字段 from (子查询) 表别名 where 条件;</span><br></pre></td></tr></table></figure>

<p>查询出2011年以后入职的员工信息，包括部门名称:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-- 查询出2011年以后入职的员工信息，包括部门名称</span><br><span class="line">-- 在员工表中查询2011-1-1以后入职的员工</span><br><span class="line">select * from emp where join_date &gt;&#x3D;&#39;2011-1-1&#39;;</span><br><span class="line">-- 查询所有的部门信息，与上面的虚拟表中的信息组合，找出所有部门id等于的dept_id</span><br><span class="line">select * from dept d, (select * from emp where join_date &gt;&#x3D;&#39;2011-1-1&#39;) e where d.&#96;id&#96;&#x3D; e.dept_id ;</span><br><span class="line"></span><br><span class="line">-- 也可以使用表连接：</span><br><span class="line">select * from emp inner join dept on emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96; where join_date &gt;&#x3D;&#39;2011-1-1&#39;;</span><br><span class="line">select * from emp inner join dept on emp.&#96;dept_id&#96; &#x3D; dept.&#96;id&#96; and join_date &gt;&#x3D;&#39;2011-1-1&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>子查询结果只要是单列，则在WHERE后面作为条件;</p>
<p>子查询结果是单例多行，则在IN后面作为集合；</p>
<p>子查询结果只要是多列，则在FROM后面作为表进行二次查询;</p>
</blockquote>
<h3 id="14、事务"><a href="#14、事务" class="headerlink" title="14、事务"></a>14、事务</h3><p>在实际的开发过程中，一个业务操作如：转账，往往是要多次访问数据库才能完成的。转账是一个用户扣钱，另一个用户加钱。如果其中有一条SQL语句出现异常，这条SQL就可能执行失败。<br>事务执行是一个整体，所有的SQL语句都必须执行成功。如果其中有1条SQL语句出现异常，则所有的SQL语句都要回滚，整个业务执行失败。</p>
<blockquote>
<p>模拟张三给李四转500元钱，一个转账的业务操作最少要执行下面的2条语句：<br>张三账号-500<br>李四账号+500</p>
<p>假设当张三账号上-500元,服务器崩溃了。李四的账号并没有+500元，数据就出现问题了。我们需要保证其中一条SQL语句出现问题，整个转账就算失败。只有两条SQL都成功了转账才算成功。这个时候就需要用到事务。</p>
</blockquote>
<p><strong>MYSQL中可以有两种方式进行事务的操作：</strong></p>
<ol>
<li><p>手动提交事务</p>
</li>
<li><p>自动提交事务</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>功能</th>
<th>sql语句</th>
</tr>
</thead>
<tbody><tr>
<td>开启事务</td>
<td>start transaction;</td>
</tr>
<tr>
<td>添加事务</td>
<td>commit；</td>
</tr>
<tr>
<td>回滚事务</td>
<td>rollback;</td>
</tr>
</tbody></table>
<h4 id="14-1-手动提交事务的过程"><a href="#14-1-手动提交事务的过程" class="headerlink" title="14.1 手动提交事务的过程"></a>14.1 手动提交事务的过程</h4><ol>
<li>执行成功的情况： 开启事务 ——&gt; 执行多条sql语句 ——&gt; 成功提交事务</li>
<li>执行失败的情况： 开启事务 ——&gt; 执行多条sql语句 ——&gt; 事务回滚 </li>
</ol>
<p>事务提交案例：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905154823524.png" alt></p>
<p>事务回滚案例：</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905154857966.png" alt></p>
<p>总结: 如果事务中SQL语句没有问题，commit提交事务，会对数据库数据的数据进行改变。 如果事务中SQL语句有问题，rollback回滚事务，会回退到开启事务时的状态。</p>
<h4 id="14-2-自动提交事务"><a href="#14-2-自动提交事务" class="headerlink" title="14.2 自动提交事务"></a>14.2 自动提交事务</h4><p>MySQL默认每一条DML(增删改)语句都是一个单独的事务，每条语句都会自动开启一个事务，语句执行完毕自动提交事务，MySQL默认开始自动提交事务;</p>
<p>取消自动提交：</p>
<ul>
<li>查看MySQL是否开启自动提交事务；@@表示全局变量，1表示开启，0表示关闭</li>
</ul>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905155230480.png" alt></p>
<ul>
<li>取消自动提交事务</li>
</ul>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905155307318.png" alt></p>
<h4 id="14-3-事务原理"><a href="#14-3-事务原理" class="headerlink" title="14.3 事务原理"></a>14.3 事务原理</h4><p>事务开启之后, 所有的操作都会临时保存到事务日志中, 事务日志只有在得到commit命令才会同步到数据表中，其他任何情况都会清空事务日志(rollback，断开连接)</p>
<p><strong>事务的步骤：</strong></p>
<ol>
<li>客户端连接数据库服务器，创建连接时创建此用户临时日志文件;</li>
<li>开启事务以后，所有的操作都会先写入到临时日志文件中;</li>
<li>所有的查询操作从表中查询，但会经过日志文件加工后才返回;</li>
<li>如果事务提交则将日志文件中的数据写到表中，否则清空日志文件。</li>
</ol>
<h4 id="14-4-回滚点"><a href="#14-4-回滚点" class="headerlink" title="14.4 回滚点"></a>14.4 回滚点</h4><p>在某些成功的操作完成之后，后续的操作有可能成功有可能失败，但是不管成功还是失败，前面操作都已经成功，可以在当前成功的位置设置一个回滚点。可以供后续失败操作返回到该位置，而不是返回所有操作，这个点称之为回滚点。</p>
<p>设置回滚点：<code>savepoint 名字</code></p>
<p>回到回滚点：<code>rollback to 名字</code></p>
<p>具体操作：</p>
<ol>
<li>将数据还原到1000</li>
<li>开启事务</li>
<li>让张三账号减3次钱，每次10块</li>
<li>设置回滚点：savepoint three_times;</li>
<li>让张三账号减4次钱，每次10块</li>
<li>回到回滚点：rollback to three_times;</li>
<li>分析执行过程</li>
</ol>
<p><strong>总结：设置回滚点可以让我们在失败的时候回到回滚点，而不是回到事务开启的时候。</strong></p>
<h4 id="14-4-事务的隔离级别"><a href="#14-4-事务的隔离级别" class="headerlink" title="14.4 事务的隔离级别"></a>14.4 事务的隔离级别</h4><h5 id="14-4-1-事务的四大特性"><a href="#14-4-1-事务的四大特性" class="headerlink" title="14.4.1 事务的四大特性"></a>14.4.1 事务的四大特性</h5><table>
<thead>
<tr>
<th>原子性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>原子性（Atomicity）</td>
<td>每个事务都是一个整体，不可再拆分，事务中所有的SQL语句要么都执行成功，要么都失败。</td>
</tr>
<tr>
<td>一致性（Consistency）</td>
<td>事务在执行前数据库的状态与执行后数据库的状态保持一致。如：转账前2个人的总金额是2000，转账后2个人总金额也是2000</td>
</tr>
<tr>
<td>隔离性（Isolation）</td>
<td>事务与事务之间不应该相互影响，执行时保持隔离的状态。</td>
</tr>
<tr>
<td>持久性（Durablity）</td>
<td>一旦事务执行成功，对数据库的修改是持久的。就算关机，也是保存下来的。</td>
</tr>
</tbody></table>
<h5 id="14-4-2-事务的隔离级别"><a href="#14-4-2-事务的隔离级别" class="headerlink" title="14.4.2 事务的隔离级别"></a>14.4.2 事务的隔离级别</h5><p>事务在操作时的理想状态： 所有的事务之间保持隔离，互不影响。因为并发操作，多个用户同时访问同一个数据。可能引发并发访问的问题：</p>
<table>
<thead>
<tr>
<th>并发访问的问题</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>脏读</td>
<td>一个事务读取到了另一个事务中尚未提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务中两次读取的数据内容不一致，要求的是一个事务中多次读取时数据是一致的，这是事务update时引发的问题</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务中两次读取的数据的数量不一致，要求在一个事务多次读取的数据的数量是一致的，这是insert或delete时引发的问题</td>
</tr>
</tbody></table>
<h5 id="14-4-3-MySQL数据库有四种隔离级别"><a href="#14-4-3-MySQL数据库有四种隔离级别" class="headerlink" title="14.4.3 MySQL数据库有四种隔离级别"></a>14.4.3 MySQL数据库有四种隔离级别</h5><p>上面的级别最低，下面的级别最高。“是”表示会出现这种问题，“否”表示不会出现这种问题。</p>
<table>
<thead>
<tr>
<th>级别</th>
<th>名字</th>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
<th>数据库默认隔离级别</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>读未提交</td>
<td>read uncommitted</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>读已提交</td>
<td>read committed</td>
<td>否</td>
<td>是</td>
<td>是</td>
<td>Oracle和SQL Server</td>
</tr>
<tr>
<td>3</td>
<td>可重复读</td>
<td>repeatable read</td>
<td>否</td>
<td>否</td>
<td>是</td>
<td>MySQL</td>
</tr>
<tr>
<td>4</td>
<td>串行化</td>
<td>serializable</td>
<td>否</td>
<td>否</td>
<td>否</td>
<td></td>
</tr>
</tbody></table>
<p><strong>隔离级别越高，性能越差，安全性越高。</strong></p>
<h5 id="14-4-4-MySQL事务隔离级别相关命令"><a href="#14-4-4-MySQL事务隔离级别相关命令" class="headerlink" title="14.4.4 MySQL事务隔离级别相关命令"></a>14.4.4 MySQL事务隔离级别相关命令</h5><ul>
<li>查询全局事务隔离级别</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @@tx_isolation;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置事务隔离级别，需要退出MySQL再重新登录才可以看到隔离级别的变化</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set global transaction isolation level 级别字符串;</span><br></pre></td></tr></table></figure>

<h3 id="15、-DCL"><a href="#15、-DCL" class="headerlink" title="15、 DCL"></a>15、 DCL</h3><p>我们现在默认使用的都是root用户，超级管理员，拥有全部的权限。但是，一个公司里面的数据库服务器上面可能同时运行着很多个项目的数据库。所以，我们应该可以根据不同的项目建立不同的用户，分配不同的权限来管理和维护数据库。<br>注：mysqld是MySQL的主程序，服务器端。mysql是MySQL的命令行工具，客户端。</p>
<h4 id="15-1-创建用户"><a href="#15-1-创建用户" class="headerlink" title="15.1 创建用户"></a>15.1 创建用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &quot;用户名&quot;@&quot;主机名&quot; identified by &quot;密码&quot;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>用户名</td>
<td>将创建的用户名</td>
</tr>
<tr>
<td>主机名</td>
<td>指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%</td>
</tr>
<tr>
<td>密码</td>
<td>该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器</td>
</tr>
</tbody></table>
<p>创建user1用户，只能在localhost这个服务器登录mysql服务器，密码为123</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;user1&#39;@&#39;localhost&#39; identified by &#39;123&#39;;</span><br></pre></td></tr></table></figure>

<p>创建user2用户可以在任何电脑上登录mysql服务器，密码为123</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;user2&#39;@&#39;%&#39; identified by &#39;123&#39;;</span><br></pre></td></tr></table></figure>

<p><strong>注：创建的用户名都在mysql数据库中的user表中可以查看到，密码经过了加密。</strong></p>
<h4 id="15-2-给用户授权"><a href="#15-2-给用户授权" class="headerlink" title="15.2 给用户授权"></a>15.2 给用户授权</h4><p>用户创建之后，没什么权限！需要给用户授权</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant 权限1,权限2,... on  数据库名.表名 to &quot;用户名&quot;@&quot;主机名&quot;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>grant … on … to</td>
<td>授权关键字</td>
</tr>
<tr>
<td>权限</td>
<td>授予用户的权限，如CREATE、ALTER、SELECT、INSERT、UPDATE等。如果要授予所有的权限则使用ALL</td>
</tr>
<tr>
<td>数据库名.表名</td>
<td>该用户可以操作哪个数据库的哪些表。如果要授予该用户对所有数据库和表的相应操作权限则可用*表示，如*.*</td>
</tr>
<tr>
<td>‘用户名‘@’主机名’</td>
<td>‘用户名‘@’主机名’给哪个用户授权，注：有2对单引号</td>
</tr>
</tbody></table>
<p>给user1用户分配对test这个数据库操作的权限：创建表，修改表，插入记录，更新记录，查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant create,alter,insert,update,select on test.* to &#39;user1&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<p>给user2用户分配所有权限，对所有数据库的所有表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on *.* to &#39;user2&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="15-3-撤销授权"><a href="#15-3-撤销授权" class="headerlink" title="15.3 撤销授权"></a>15.3 撤销授权</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke 权限1,权限2,... on 数据库.表名 revoke 权限1，权限2... on test.* from &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>revoke… on … from</td>
<td>撤销授权的关键字</td>
</tr>
<tr>
<td>权限</td>
<td>用户的权限，如CREATE、ALTER、SELECT、INSERT、UPDATE等，所有的权限则使用ALL</td>
</tr>
<tr>
<td>数据库名.表名</td>
<td>对哪些数据库的哪些表，如果要取消该用户对所有数据库和表的操作权限则可用<em>表示，如\</em>.*</td>
</tr>
<tr>
<td>‘用户名‘@’主机名’</td>
<td>给哪个用户撤销</td>
</tr>
</tbody></table>
<p>撤销user1用户对test数据库所有表的操作的权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke all on test.* from &#39;user1&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="15-4-查看权限"><a href="#15-4-查看权限" class="headerlink" title="15.4 查看权限"></a>15.4 查看权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure>

<p>查看user1用户的权限</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905164215426.png" alt></p>
<h4 id="15-5-删除用户"><a href="#15-5-删除用户" class="headerlink" title="15.5 删除用户"></a>15.5 删除用户</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &#39;用户名&#39;@&#39;主机名&#39;;</span><br></pre></td></tr></table></figure>

<p>删除user1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop user &#39;user1&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905164531614.png" alt></p>
<h4 id="15-6-修改管理员密码"><a href="#15-6-修改管理员密码" class="headerlink" title="15.6 修改管理员密码"></a>15.6 修改管理员密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqladmin -uroot -p password 新密码</span><br></pre></td></tr></table></figure>

<p>注意：需要在未登陆MySQL的情况下操作，新密码不需要加上引号。</p>
<p>将root管理员的新密码改成123456</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905164809350.png" alt></p>
<h4 id="15-7-修改普通用户密码"><a href="#15-7-修改普通用户密码" class="headerlink" title="15.7 修改普通用户密码"></a>15.7 修改普通用户密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password for &#39;用户名&#39;@&#39;主机名&#39; &#x3D; password(&#39;新密码&#39;);</span><br></pre></td></tr></table></figure>

<p>将’user1’@’localhost’的密码改成’666666’</p>
<p><img src="http://qny.suixinya.top/HexoBlog/image-20200905164929809.png" alt></p>
<h4 id="扩充："><a href="#扩充：" class="headerlink" title="扩充："></a>扩充：</h4><p>忘记管理员密码重新设置的方法：</p>
<ol>
<li>先停止MySQL服务：以管理员身份运行终端，输入：<code>net stop mysql</code></li>
<li>使用无验证方式启动MySQL服务: <code>mysqld --skip-grant-tables</code></li>
<li>打开新终端，直接输入<code>mysql</code>,就可以登录更改密码；（<code>use mysql</code> 、 <code>update user set password = password(&quot;新密码&quot;) where user=&#39;root&#39;;</code>）</li>
<li>任务管理器结束mysqld进程；</li>
<li>启动mysql服务</li>
<li>使用新密码登录</li>
</ol>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
